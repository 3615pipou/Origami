!function(e){var t={};function n(i){if(t[i])return t[i].exports;var o=t[i]={i:i,l:!1,exports:{}};return e[i].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:i})},n.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t);var i,o=(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),s=1e-8;function r(e){return void 0!==e&&!isNaN(e)&&!isNaN(e)}function a(e,t,n){return void 0===n&&(n=s),Math.abs(e-t)<n}function d(e,t){for(;e<0;)e+=2*Math.PI;for(;t<0;)t+=2*Math.PI;var n=e-t;return n>=0?n:2*Math.PI-(t-e)}function h(e,t){var n=t.x*e.x+t.y*e.y,i=t.x*e.y-t.y*e.x,o=Math.atan2(i,n);return o<0&&(o+=2*Math.PI),o}function u(e,t,n,i,o,s){function r(e,t){return e.x*t.y-t.x*e.y}var d=r(t,i),h=-d;if(!a(d,0,s)){var u=r(n.subtract(e),i)/d;return o(u,r(e.subtract(n),t)/h)?e.add(t.scale(u)):void 0}}function c(e,t,n){return void 0===n&&(n=s),u(new x(e.point.x,e.point.y),new x(e.direction.x,e.direction.y),new x(t.point.x,t.point.y),new x(t.direction.x,t.direction.y),function(e,t){return!0},n)}function l(e,t,n){return void 0===n&&(n=s),u(new x(e.point.x,e.point.y),new x(e.direction.x,e.direction.y),new x(t.origin.x,t.origin.y),new x(t.direction.x,t.direction.y),function(e,t){return t>=0},n)}function p(e,t,n){return void 0===n&&(n=s),u(new x(e.point.x,e.point.y),new x(e.direction.x,e.direction.y),new x(t.nodes[0].x,t.nodes[0].y),new x(t.nodes[1].x-t.nodes[0].x,t.nodes[1].y-t.nodes[0].y),function(e,t){return t>=0&&t<=1},n)}function f(e,t,n){return void 0===n&&(n=s),u(new x(e.origin.x,e.origin.y),new x(e.direction.x,e.direction.y),new x(t.nodes[0].x,t.nodes[0].y),new x(t.nodes[1].x-t.nodes[0].x,t.nodes[1].y-t.nodes[0].y),function(e,t){return e>=0&&t>=0&&t<=1},n)}function g(e,t,n){return void 0===n&&(n=s),u(new x(e.nodes[0].x,e.nodes[0].y),new x(e.nodes[1].x-e.nodes[0].x,e.nodes[1].y-e.nodes[0].y),new x(t.nodes[0].x,t.nodes[0].y),new x(t.nodes[1].x-t.nodes[0].x,t.nodes[1].y-t.nodes[0].y),function(e,t){return e>=0&&e<=1&&t>=0&&t<=1},n)}function y(e,t,n,i){var o=Math.pow(t,2),s=n.x-e.x,r=n.y-e.y,a=(l=i.x-e.x)-s,d=(p=i.y-e.y)-r,h=a*a+d*d,u=s*p-l*r;function c(e){return e<0?-1:1}s=(u*d+c(d)*a*Math.sqrt(o*h-u*u))/h;var l=(u*d-c(d)*a*Math.sqrt(o*h-u*u))/h,p=(r=(-u*a+Math.abs(d)*Math.sqrt(o*h-u*u))/h,(-u*a-Math.abs(d)*Math.sqrt(o*h-u*u))/h),f=[];return isNaN(s)||f.push(new x(s+e.x,r+e.y)),isNaN(l)||f.push(new x(l+e.x,p+e.y)),f}var v,w=function(){function e(e,t,n,i,o,s){this.a=void 0!==e?e:1,this.b=void 0!==t?t:0,this.c=void 0!==n?n:0,this.d=void 0!==i?i:1,this.tx=void 0!==o?o:0,this.ty=void 0!==s?s:0}return e.prototype.identity=function(){this.a=1,this.b=0,this.c=0,this.d=1,this.tx=0,this.ty=0},e.prototype.mult=function(t){var n=new e;return n.a=this.a*t.a+this.c*t.b,n.c=this.a*t.c+this.c*t.d,n.tx=this.a*t.tx+this.c*t.ty+this.tx,n.b=this.b*t.a+this.d*t.b,n.d=this.b*t.c+this.d*t.d,n.ty=this.b*t.tx+this.d*t.ty+this.ty,n},e.prototype.reflection=function(e,t){var n=Math.atan2(e.y,e.x),i=Math.cos(n),o=Math.sin(n),s=Math.cos(-n),r=Math.sin(-n);return this.a=i*s+o*r,this.b=i*-r+o*s,this.c=o*s+-i*r,this.d=o*-r+-i*s,void 0!==t&&(this.tx=t.x+this.a*-t.x+-t.y*this.c,this.ty=t.y+this.b*-t.x+-t.y*this.d),this},e.prototype.rotation=function(e,t){return this.a=Math.cos(e),this.c=-Math.sin(e),this.b=Math.sin(e),this.d=Math.cos(e),void 0!==t&&(this.tx=t.x,this.ty=t.y),this},e.prototype.copy=function(){var t=new e;return t.a=this.a,t.c=this.c,t.tx=this.tx,t.b=this.b,t.d=this.d,t.ty=this.ty,t},e}(),x=function(){function e(e,t){this.x=e,this.y=t}return e.prototype.normalize=function(){var t=this.magnitude();return new e(this.x/t,this.y/t)},e.prototype.dot=function(e){return this.x*e.x+this.y*e.y},e.prototype.cross=function(e){return this.x*e.y-this.y*e.x},e.prototype.magnitude=function(){return Math.sqrt(this.x*this.x+this.y*this.y)},e.prototype.distanceTo=function(e){return Math.sqrt(Math.pow(this.x-e.x,2)+Math.pow(this.y-e.y,2))},e.prototype.equivalent=function(e,t){return void 0==t&&(t=s),a(this.x,e.x,t)&&a(this.y,e.y,t)},e.prototype.transform=function(t){return new e(this.x*t.a+this.y*t.c+t.tx,this.x*t.b+this.y*t.d+t.ty)},e.prototype.rotate90=function(){return new e(-this.y,this.x)},e.prototype.rotate270=function(){return new e(this.y,-this.x)},e.prototype.rotate=function(e,t){return this.transform((new w).rotation(e,t))},e.prototype.lerp=function(t,n){var i=1-n;return new e(this.x*n+t.x*i,this.y*n+t.y*i)},e.prototype.angleLerp=function(t,n){var i,o,s,r,a=Math.atan2(this.y,this.x),d=Math.atan2(t.y,t.x),h=a+(i=a,o=d,s=2*Math.PI,(2*(r=(o-i)%s)%s-r)*n);return new e(Math.cos(h),Math.sin(h))},e.prototype.reflect=function(t){var n,i;if(void 0!==t.direction)n=t.point||t.origin,i=t.direction;else{if(void 0===t.nodes)return;n=new e(t.nodes[0].x,t.nodes[0].y),i=new e(t.nodes[1].x,t.nodes[1].y).subtract(n)}return this.transform((new w).reflection(i,n))},e.prototype.scale=function(t){return new e(this.x*t,this.y*t)},e.prototype.add=function(t,n){return void 0===(i=t)||isNaN(i.x)||isNaN(i.y)?r(n)?new e(this.x+t,this.y+n):void 0:new e(this.x+t.x,this.y+t.y);var i},e.prototype.subtract=function(t){return new e(this.x-t.x,this.y-t.y)},e.prototype.multiply=function(t){return new e(this.x*t.x,this.y*t.y)},e.prototype.midpoint=function(t){return new e(.5*(this.x+t.x),.5*(this.y+t.y))},e.prototype.abs=function(){return new e(Math.abs(this.x),Math.abs(this.y))},e.prototype.commonX=function(e,t){return a(this.y,e.y,t)},e.prototype.commonY=function(e,t){return a(this.x,e.x,t)},e}(),m=(function(){function e(){}e.prototype.length=function(){},e.prototype.vector=function(){},e.prototype.parallel=function(e,t){},e.prototype.collinear=function(e){},e.prototype.equivalent=function(e,t){},e.prototype.intersection=function(e,t){},e.prototype.reflectionMatrix=function(){},e.prototype.nearestPoint=function(e){},e.prototype.nearestPointNormalTo=function(e){},e.prototype.transform=function(e){},e.prototype.degenrate=function(e){}}(),function(){function e(e,t,n,i){t instanceof x?(this.point=e,this.direction=t):void 0!==e.x?(this.point=new x(e.x,e.y),this.direction=new x(t.x,t.y)):(this.point=new x(e,t),this.direction=new x(n,i))}return e.prototype.length=function(){return 1/0},e.prototype.vector=function(){return this.direction},e.prototype.parallel=function(e,t){void 0===t&&(t=s);var n=void 0!==e.nodes?e.nodes[1].subtract(e.nodes[0]):e.direction;return void 0!==n?a(this.direction.cross(n),0,t):void 0},e.prototype.collinear=function(e,t){void 0===t&&(t=s);var n=[this.point.x,this.point.x+this.direction.x,e.x],i=[this.point.y,this.point.y+this.direction.y,e.y];return a(n[0]*(i[1]-i[2])+n[1]*(i[2]-i[0])+n[2]*(i[0]-i[1]),0,t)},e.prototype.equivalent=function(e,t){return this.collinear(e.point,t)&&this.parallel(e,t)},e.prototype.intersection=function(t,n){return t instanceof e?c(this,t,n):t instanceof E?l(this,t,n):t instanceof b?p(this,t,n):void 0},e.prototype.reflectionMatrix=function(){return(new w).reflection(this.direction,this.point)},e.prototype.nearestPoint=function(e){return this.nearestPointNormalTo(e)},e.prototype.nearestPointNormalTo=function(e){var t=this.direction.normalize(),n=(e.x-this.point.x)*t.x+(e.y-this.point.y)*t.y;return new x(this.point.x+n*t.x,this.point.y+n*t.y)},e.prototype.transform=function(t){return new e(this.point.transform(t),this.direction.transform(t))},e.prototype.degenrate=function(e){return void 0===e&&(e=s),a(this.direction.magnitude(),0,e)},e.prototype.bisect=function(t){if(this.parallel(t))return[new e(this.point.midpoint(t.point),this.direction)];var n=c(this,t),i=(o=this.direction,s=t.direction,o=o.normalize(),s=s.normalize(),[o.add(s).normalize(),new x(-o.x-s.x,-o.y-s.y).normalize()]);i[1]=i[0].rotate90();var o,s;i.sort(function(e,t){return Math.abs(this.direction.cross(i[0]))-Math.abs(this.direction.cross(i[1]))}).map(function(t){return new e(n,t)},this)},e}()),E=function(){function e(e,t,n,i){e instanceof x?(this.origin=e,this.direction=t):void 0!==e.x?(this.origin=new x(e.x,e.y),this.direction=new x(t.x,t.y)):(this.origin=new x(e,t),this.direction=new x(n,i))}return e.prototype.length=function(){return 1/0},e.prototype.vector=function(){return this.direction},e.prototype.parallel=function(e,t){void 0===t&&(t=s);var n=void 0!==e.nodes?e.nodes[1].subtract(e.nodes[0]):e.direction;if(void 0!==n)return a(this.direction.cross(n),0,t)},e.prototype.collinear=function(e,t){void 0===t&&(t=s);var n=new x(e.x-this.origin.x,e.y-this.origin.y);return!(n.dot(this.direction)<-t)&&a(n.cross(this.direction),0,t)},e.prototype.equivalent=function(e,t){return void 0===t&&(t=s),this.origin.equivalent(e.origin,t)&&this.direction.normalize().equivalent(e.direction.normalize(),t)},e.prototype.intersection=function(t,n){return t instanceof e?function(e,t,n){return void 0===n&&(n=s),u(new x(e.origin.x,e.origin.y),new x(e.direction.x,e.direction.y),new x(t.origin.x,t.origin.y),new x(t.direction.x,t.direction.y),function(e,t){return e>=0&&t>=0},n)}(this,t,n):t instanceof m?l(t,this,n):t instanceof b?f(this,t,n):void 0},e.prototype.reflectionMatrix=function(){return(new w).reflection(this.direction,this.origin)},e.prototype.nearestPoint=function(e){var t=this.nearestPointNormalTo(e);return void 0!==t?t:this.origin},e.prototype.nearestPointNormalTo=function(e){var t=this.direction.normalize(),n=(e.x-this.origin.x)*t.x+(e.y-this.origin.y)*t.y;if(!(n<0))return new x(this.origin.x+n*t.x,this.origin.y+n*t.y)},e.prototype.transform=function(t){return new e(this.origin.transform(t),this.direction.transform(t))},e.prototype.degenrate=function(e){return void 0===e&&(e=s),a(this.direction.magnitude(),0,e)},e.prototype.flip=function(){return new e(this.origin,new x(-this.direction.x,-this.direction.y))},e.prototype.clipWithEdge=function(e,t){var n=f(this,e,t);if(void 0!==n)return new b(this.origin,n)},e.prototype.clipWithEdges=function(e,t){return void 0===t&&(t=s),e.map(function(e){return this.clipWithEdge(e)},this).filter(function(e){return void 0!==e}).map(function(e){return{edge:e,length:e.length()}}).filter(function(e){return e.length>t}).sort(function(e,t){return e.length-t.length}).map(function(e){return e.edge})},e.prototype.clipWithEdgesDetails=function(e,t){return void 0===t&&(t=s),e.map(function(e){return{edge:this.clipWithEdge(e),intersection:e}},this).filter(function(e){return void 0!==e.edge}).map(function(e){return{edge:e.edge,intersection:e.intersection,length:e.edge.length()}}).filter(function(e){return e.length>t}).sort(function(e,t){return e.length-t.length}).map(function(e){return{edge:e.edge,intersection:e.intersection}})},e}(),b=function(){function e(e,t,n,i){e instanceof x&&t instanceof x?this.nodes=[e,t]:void 0!==e.x?this.nodes=[new x(e.x,e.y),new x(t.x,t.y)]:r(i)?this.nodes=[new x(e,t),new x(n,i)]:void 0!==e.nodes&&(this.nodes=[new x(e.nodes[0].x,e.nodes[0].y),new x(e.nodes[1].x,e.nodes[1].y)])}return e.prototype.length=function(){return Math.sqrt(Math.pow(this.nodes[0].x-this.nodes[1].x,2)+Math.pow(this.nodes[0].y-this.nodes[1].y,2))},e.prototype.vector=function(e){return void 0===e?this.nodes[1].subtract(this.nodes[0]):this.nodes[0].equivalent(e)?this.nodes[1].subtract(this.nodes[0]):this.nodes[0].subtract(this.nodes[1])},e.prototype.parallel=function(e,t){void 0===t&&(t=s);var n=void 0!==e.nodes?e.nodes[1].subtract(e.nodes[0]):e.direction;if(void 0!==n)return a(this.nodes[1].subtract(this.nodes[0]).cross(n),0,t)},e.prototype.collinear=function(t,n){void 0===n&&(n=s);var i=new e(t,this.nodes[0]).length(),o=new e(t,this.nodes[1]).length();return a(this.length()-i-o,0,n)},e.prototype.equivalent=function(e,t){return void 0===t&&(t=s),this.nodes[0].equivalent(e.nodes[0],t)&&this.nodes[1].equivalent(e.nodes[1],t)||this.nodes[0].equivalent(e.nodes[1],t)&&this.nodes[1].equivalent(e.nodes[0],t)},e.prototype.intersection=function(t,n){return t instanceof e?g(this,t,n):t instanceof m?p(t,this,n):t instanceof E?f(t,this,n):void 0},e.prototype.reflectionMatrix=function(){return(new w).reflection(this.nodes[1].subtract(this.nodes[0]),this.nodes[0])},e.prototype.nearestPoint=function(e){var t=this.nearestPointNormalTo(e);return void 0!==t?t:this.nodes.map(function(t){return{point:t,distance:t.distanceTo(e)}},this).sort(function(e,t){return e.distance-t.distance}).shift().point},e.prototype.nearestPointNormalTo=function(e){var t=this.nodes[0].distanceTo(this.nodes[1]),n=((e.x-this.nodes[0].x)*(this.nodes[1].x-this.nodes[0].x)+(e.y-this.nodes[0].y)*(this.nodes[1].y-this.nodes[0].y))/Math.pow(t,2);if(!(n<0||n>1))return new x(this.nodes[0].x+n*(this.nodes[1].x-this.nodes[0].x),this.nodes[0].y+n*(this.nodes[1].y-this.nodes[0].y))},e.prototype.transform=function(t){return new e(this.nodes[0].transform(t),this.nodes[1].transform(t))},e.prototype.degenrate=function(e){return void 0===e&&(e=s),this.nodes[0].equivalent(this.nodes[1],e)},e.prototype.midpoint=function(){return new x(.5*(this.nodes[0].x+this.nodes[1].x),.5*(this.nodes[0].y+this.nodes[1].y))},e.prototype.perpendicularBisector=function(){return new m(this.midpoint(),this.vector().rotate90())},e.prototype.infiniteLine=function(){return new m(this.nodes[0],this.nodes[1].subtract(this.nodes[0]))},e}(),P=function(){function e(){this.nodes=[]}return e.prototype.edges=function(){for(var e=[],t=0;t<this.nodes.length-1;t++)e.push(new b(this.nodes[t],this.nodes[t+1]));return e},e.prototype.rayReflectRepeat=function(e,t,n){var i=[],o=e.clipWithEdgesDetails(t);if(void 0!==n&&a(e.direction.cross(n.subtract(e.origin)),0,s)&&(0===o.length||e.origin.distanceTo(n)<o[0].edge.length()))return this.nodes=[e.origin,n],this;i.push(o[0]);for(var r=0;r<100;){var d=i[i.length-1],h=new x(d.intersection.nodes[0].x,d.intersection.nodes[0].y),u=new x(d.intersection.nodes[1].x,d.intersection.nodes[1].y),c=(new w).reflection(u.subtract(h),h),l=new E(d.edge.nodes[1],d.edge.nodes[0].transform(c).subtract(d.edge.nodes[1])),p=l.clipWithEdgesDetails(t);if(void 0!==n&&a(l.direction.cross(n.subtract(l.origin)),0,s)){i.push({edge:new b(l.origin,n),intersection:void 0});break}if(0===p.length||void 0===p[0])break;i.push(p[0]),r++}return this.nodes=i.map(function(e){return e.edge.nodes[0]}),this.nodes.push(i[i.length-1].edge.nodes[1]),this},e}(),N=function(){return function(e,t,n,i){this.topLeft={x:e,y:t},this.size={width:n,height:i}}}(),M=function(){function e(e,t){this.points=e,this.edges=this.points.map(function(e,t){var n=this.points[(t+1)%this.points.length];return new b(e,n)},this),this.sectors=this.points.map(function(e,t){var n=(t+this.points.length-1)%this.points.length,i=(t+1)%this.points.length;return new j(e,[this.points[n],this.points[i]])},this),this.circumcenter=t}return e.prototype.angles=function(){return this.points.map(function(e,t){var n=this.points[(t+this.points.length-1)%this.points.length];return h(this.points[(t+1)%this.points.length].subtract(e),n.subtract(e))},this)},e.prototype.isAcute=function(){for(var e=this.angles(),t=0;t<e.length;t++)if(e[t]>.5*Math.PI)return!1;return!0},e.prototype.isObtuse=function(){for(var e=this.angles(),t=0;t<e.length;t++)if(e[t]>.5*Math.PI)return!0;return!1},e.prototype.isRight=function(){for(var e=this.angles(),t=0;t<e.length;t++)if(a(e[t],.5*Math.PI))return!0;return!1},e.prototype.pointInside=function(e){for(var t=0;t<this.points.length;t++){var n=this.points[t],i=this.points[(t+1)%this.points.length];if((e.y-n.y)*(i.x-n.x)-(e.x-n.x)*(i.y-n.y)<0)return!1}return!0},e}(),k=(function(e){function t(){return null!==e&&e.apply(this,arguments)||this}o(t,e)}(M),function(){function e(e,t,n){void 0!==n?(this.center=new x(e,t),this.radius=n):(this.center=e,this.radius=t)}return e.prototype.intersection=function(e){return e instanceof m?y(this.center,this.radius,e.point,e.point.add(e.direction)):e instanceof b?y(this.center,this.radius,e.nodes[0],e.nodes[1]):e instanceof E?y(this.center,this.radius,e.origin,e.origin.add(e.direction)):void 0},e}()),A=function(){function e(){}return e.prototype.center=function(){for(var e=1/0,t=0,n=1/0,i=0,o=this.edges.map(function(e){return e.nodes[0]}),s=0;s<o.length;s++)o[s].x>t&&(t=o[s].x),o[s].x<e&&(e=o[s].x),o[s].y>i&&(i=o[s].y),o[s].y<n&&(n=o[s].y);return new x(e+.5*(e+t),n+.5*(n+i))},e.prototype.contains=function(e){for(var t=0;t<this.edges.length;t++){var n=this.edges[t].nodes[1].subtract(this.edges[t].nodes[0]),i=new x(e.x-this.edges[t].nodes[0].x,e.y-this.edges[t].nodes[0].y);if(n.cross(i)<0)return!1}return!0},e.prototype.liesOnEdge=function(e){for(var t=0;t<this.edges.length;t++)if(this.edges[t].collinear(e))return!0;return!1},e.prototype.clipEdge=function(e){var t=this.edges.map(function(t){return g(e,t)}).filter(function(e){return void 0!==e}).filter(function(t){return!t.equivalent(e.nodes[0])&&!t.equivalent(e.nodes[1])});switch(t.length){case 0:return this.contains(e.nodes[0])?e:void 0;case 1:return this.contains(e.nodes[0])?new b(e.nodes[0],t[0]):new b(e.nodes[1],t[0]);default:for(var n=1;n<t.length;n++)if(!t[0].equivalent(t[n]))return new b(t[0],t[n])}},e.prototype.clipLine=function(e){var t=this.edges.map(function(t){return p(e,t)}).filter(function(e){return void 0!==e});switch(t.length){case 0:return;case 1:return new b(t[0],t[0]);default:for(var n=1;n<t.length;n++)if(!t[0].equivalent(t[n]))return new b(t[0],t[n])}},e.prototype.clipRay=function(e){var t=this.edges.map(function(t){return f(e,t)}).filter(function(e){return void 0!==e});switch(t.length){case 0:return;case 1:return new b(e.origin,t[0]);default:for(var n=1;n<t.length;n++)if(!t[0].equivalent(t[n]))return new b(t[0],t[n])}},e.prototype.setEdgesFromPoints=function(e){return e.map(function(t,n){var i=e[(n+1)%e.length];return new b(t,i)},this)},e.prototype.convexHull=function(e){if(void 0!==e&&0!==e.length){var t=e.sort(function(e,t){return a(e.y,t.y,s)?e.x-t.x:e.y-t.y}),n=[];n.push(t[0]);var i=0,o=0;do{o++;var r=n.length-1,d=t.filter(function(e){return!(a(e.x,n[r].x,s)&&a(e.y,n[r].y,s))}).map(function(e){for(var t=Math.atan2(n[r].y-e.y,n[r].x-e.x);t<i;)t+=2*Math.PI;return{node:e,angle:t,distance:void 0}}).sort(function(e,t){return e.angle<t.angle?-1:e.angle>t.angle?1:0});if(0===d.length)return void(this.edges=[]);var h=d[0];if(d=d.filter(function(e){return a(h.angle,e.angle,.003)}).map(function(e){var t=Math.sqrt(Math.pow(n[r].x-e.node.x,2)+Math.pow(n[r].y-e.node.y,2));return e.distance=t,e}).sort(function(e,t){return e.distance<t.distance?1:e.distance>t.distance?-1:0}),n.filter(function(e){return e===d[0].node}).length>0)return this.edges=this.setEdgesFromPoints(n),this;n.push(d[0].node),i=Math.atan2(n[r].y-d[0].node.y,n[r].x-d[0].node.x)}while(o<1e4);this.edges=[]}else this.edges=[]},e.prototype.minimumRect=function(){var e=1/0,t=-1/0,n=1/0,i=-1/0;return this.edges.map(function(e){return e.nodes[0]}).forEach(function(o){o.x>t&&(t=o.x),o.x<e&&(e=o.x),o.y>i&&(i=o.y),o.y<n&&(n=o.y)}),new N(e,n,t-e,i-n)},e.prototype.copy=function(){var t=new e;return t.edges=this.edges.map(function(e){return new b(e.nodes[0].x,e.nodes[0].y,e.nodes[1].x,e.nodes[1].y)}),t},e}(),j=function(){function e(e,t){this.origin=e,this.endPoints=t}return e.prototype.vectors=function(){return this.endPoints.map(function(e){return new x(e.x-this.origin.x,e.y-this.origin.y)},this)},e.prototype.angle=function(){var e=this.vectors();return h(e[0],e[1])},e.prototype.bisect=function(){for(var e=this.vectors().map(function(e){return Math.atan2(e.y,e.x)});e[0]<0;)e[0]+=2*Math.PI;for(;e[1]<0;)e[1]+=2*Math.PI;var t=d(e[0],e[1]),n=e[0]-.5*t;return new x(Math.cos(n),Math.sin(n))},e.prototype.subsectAngle=function(e){if(void 0===e||e<1)throw"subsetAngle() invalid argument";for(var t=this.vectors().map(function(e){return Math.atan2(e.y,e.x)}),n=d(t[0],t[1]),i=[],o=1;o<e;o++)i.push(t[0]-n*(1/e)*o);return i},e.prototype.getEdgeVectorsForNewAngle=function(e,t){var n=this.vectors(),i=e-h(n[0],n[1]),o=[.5*-i,.5*i];return n.map(function(e,t){return e.rotate(o[t])},this)},e.prototype.equivalent=function(e){return e.origin.equivalent(this.origin)&&e.endPoints[0].equivalent(this.endPoints[0])&&e.endPoints[1].equivalent(this.endPoints[1])},e.prototype.sortByClockwise=function(){},e}(),C=function(e){function t(t,n,i){var o=e.call(this,t,n)||this;switch(o.isEdge=!1,o.isCorner=!1,o.overlaped=[],o.hull=(new A).convexHull([t[0],t[1],t[2],n].filter(function(e){return void 0!==e})),o.units=o.points.map(function(e,t){var i=this.points[(t+1)%this.points.length];return new q(n,[e,i])},o),o.points.length){case 1:o.isCorner=!0,o.addCornerMolecules();break;case 2:o.isEdge=!0,o.units=o.units.filter(function(e){return!((e.vertex.y-e.base[0].y)*(e.base[1].x-e.base[0].x)-(e.vertex.x-e.base[0].x)*(e.base[1].y-e.base[0].y)<0)},o),o.addEdgeMolecules(i)}var s=void 0;if(o.units=o.units.filter(function(e){return!((e.vertex.y-e.base[0].y)*(e.base[1].x-e.base[0].x)-(e.vertex.x-e.base[0].x)*(e.base[1].y-e.base[0].y)<0)||(s=e,!1)},o),void 0!==s){var r=h(s.vertex.subtract(s.base[1]),s.base[0].subtract(s.base[1]));o.units.forEach(function(e){e.crimpAngle-=r})}return o}return o(t,e),t.prototype.addEdgeMolecules=function(e){if(this.edgeNormal=e.normalize().abs(),!(this.units.length<1)){var t=this.units[0].base,n=t.map(function(e){var t=this.circumcenter.subtract(e).multiply(this.edgeNormal).scale(2);return e.add(t)},this);this.units=this.units.concat([new q(this.circumcenter,[t[1],n[1]]),new q(this.circumcenter,[n[0],t[0]])])}},t.prototype.addCornerMolecules=function(){},t.prototype.generateCreases=function(){var e=[];this.units.map(function(t,n){var i=this.units[(n+1)%this.units.length];t.base[1].equivalent(i.base[0])&&e.push(new b(t.base[1],t.vertex))},this);return this.units.map(function(e){return e.generateCrimpCreaseLines()}).forEach(function(t){e=e.concat(t)},this),this.isObtuse()&&this.units.forEach(function(t,n){this.units[(n+1)%this.units.length];t.base[0].equivalent(t.base[1])&&e.push(new b(t.base[0],t.vertex))},this),e},t}(M),q=function(){function e(e,t,n){if(this.vertex=e,this.base=t,this.crimpAngle=n,this.overlapped=[],void 0===this.crimpAngle){var i=t[1].subtract(t[0]),o=e.subtract(t[0]),s=h(i,o),r=h(o,i);this.crimpAngle=s<r?s:r}}return e.prototype.crimpLocations=function(){var e=Math.atan2(this.base[1].y-this.base[0].y,this.base[1].x-this.base[0].x),t=new x(Math.cos(e+this.crimpAngle),Math.sin(e+this.crimpAngle)),n=new x(Math.cos(e+.5*this.crimpAngle),Math.sin(e+.5*this.crimpAngle)),i=new b(this.vertex,this.base[0].midpoint(this.base[1]));return[f(new E(this.base[0],t),i),f(new E(this.base[0],n),i)]},e.prototype.generateCrimpCreaseLines=function(){var e=this.crimpLocations(),t=new b(this.vertex,this.base[0].midpoint(this.base[1]));this.overlapped.length>0&&(t.nodes[1]=this.overlapped[0].circumcenter);var n=[t].concat(D(this.overlapped,function(e){return e.generateCreases()})),i=[t].concat((new P).rayReflectRepeat(new E(this.base[0],this.base[1].subtract(this.base[0])),n,this.base[1]).edges());return e.filter(function(e){return void 0!==e&&!e.equivalent(this.vertex)},this).forEach(function(e){i=i.concat((new P).rayReflectRepeat(new E(this.base[0],e.subtract(this.base[0])),n,this.base[1]).edges())},this),i},e.prototype.pointInside=function(e){for(var t=[this.vertex,this.base[0],this.base[1]],n=0;n<t.length;n++){var i=t[n],o=t[(n+1)%t.length];if((e.y-i.y)*(o.x-i.x)-(e.x-i.x)*(o.y-i.y)<0)return!1}return!0},e}(),T=function(){return function(){this.cache={}}}(),F=function(){return function(){this.points=[],this.edges=[]}}(),_=function(){return function(){this.edges=[],this.cells=[],this.isEdge=!1,this.isCorner=!1}}(),D=(function(){function e(e,t){var n=function(e,n){return e.filter(function(e){return e.equivalent(n,t)}).length>0};void 0===t&&(t=s);var i=D(e.edges,function(e){return[new x(e[0][0],e[0][1]),new x(e[1][0],e[1][1])]}),o=(new A).convexHull(i);this.edges=[],this.junctions=[],this.cells=[],this.edges=e.edges.map(function(e){var t=new T;return t.endPoints=[new x(e[0][0],e[0][1]),new x(e[1][0],e[1][1])],t.cache={left:e.left,right:e.right},t}),this.cells=e.cells.map(function(e){var n=new F;return n.site=new x(e.site[0],e.site[1]),n.edges=e.halfedges.map(function(e){return this.edges[e]},this),n.points=n.edges.map(function(e,i){var o=e.endPoints[0],s=e.endPoints[1],r=n.edges[(i+1)%n.edges.length].endPoints[0],a=n.edges[(i+1)%n.edges.length].endPoints[1];return o.equivalent(r,t)||o.equivalent(a,t)?s:o},this),n},this),this.edges.forEach(function(e){var n=[void 0,void 0];if(void 0!==e.cache.left)for(var i=new x(e.cache.left[0],e.cache.left[1]),o=0;o<this.cells.length;o++)if(i.equivalent(this.cells[o].site,t)){n[0]=this.cells[o];break}if(void 0!==e.cache.right){var s=new x(e.cache.right[0],e.cache.right[1]);for(o=0;o<this.cells.length;o++)if(s.equivalent(this.cells[o].site,t)){n[1]=this.cells[o];break}}e.cells=n,e.isBoundary=!1,void 0!==e.cells[0]&&void 0!==e.cells[1]||(e.isBoundary=!0),e.cache={}},this);var r=[];return this.edges.forEach(function(e){n(r,e.endPoints[0])||r.push(e.endPoints[0]),n(r,e.endPoints[1])||r.push(e.endPoints[1])},this),this.junctions=r.map(function(e){var t=new _;switch(t.position=e,t.cells=this.cells.filter(function(t){return n(t.points,e)},this).sort(function(t,n){var i=t.site.subtract(e),o=n.site.subtract(e);return Math.atan2(i.y,i.x)-Math.atan2(o.y,o.x)}),t.cells.length){case 1:t.isCorner=!0;break;case 2:t.isEdge=!0,o.edges.forEach(function(e){e.collinear(t.position)&&(t.edgeNormal=e.nodes[1].subtract(e.nodes[0]).rotate90())})}return t.edges=this.edges.filter(function(t){return n(t.endPoints,e)},this).sort(function(t,n){var i=t.endPoints[0];i.equivalent(e)&&(i=t.endPoints[1]);var o=n.endPoints[0];o.equivalent(e)&&(o=n.endPoints[1]);var s=i.subtract(e),r=o.subtract(e);return Math.atan2(s.y,s.x)-Math.atan2(r.y,r.x)}),t},this),this}e.prototype.edgeExists=function(e,t){void 0===t&&(t=s),this.edges.forEach(function(n){return n.endPoints[0].equivalent(e[0],t)&&n.endPoints[1].equivalent(e[1],t)?n:n.endPoints[1].equivalent(e[0],t)&&n.endPoints[0].equivalent(e[1],t)?n:void 0})},e.prototype.generateMolecules=function(e){return this.junctions.map(function(t){var n=t.cells.map(function(n){return n.site.lerp(t.position,e)},this);return new C(n,t.position,t.isEdge?t.edgeNormal:void 0)},this)},e.prototype.generateSortedMolecules=function(e){for(var t=this.generateMolecules(e),n=0;n<t.length;n++)for(var i=0;i<t.length;i++)n!==i&&t[i].units.forEach(function(e){e.pointInside(t[n].circumcenter)&&(e.overlapped.push(t[n]),t[i].overlaped.push(t[n]))});for(n=0;n<t.length;n++)t[n].units.forEach(function(e){e.overlapped.sort(function(t,n){return t.circumcenter.distanceTo(e.vertex)-n.circumcenter.distanceTo(e.vertex)})}),t[n].overlaped.sort(function(e,i){return e.circumcenter.distanceTo(t[n].circumcenter)-i.circumcenter.distanceTo(t[n].circumcenter)});for(var o=[],s=t.slice(),r=0;s.length>0;){o.push([]);for(n=s.length-1;n>=0;n--)s[n].overlaped.length<=r&&(o[r].push(s[n]),s.splice(n,1));r++}return o}}(),function(e,t){return e.reduce(function(e,n){return t(n).concat(e)},[])}),L=function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function i(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),O=function(){function e(e,t){this.nodes={total:0,isolated:0},this.edges={total:0,duplicate:0,circular:0},void 0!==e&&(this.nodes.total=e),void 0!==t&&(this.edges.total=t)}return e.prototype.join=function(e){return this.nodes.total+=e.nodes.total,this.edges.total+=e.edges.total,this.nodes.isolated+=e.nodes.isolated,this.edges.duplicate+=e.edges.duplicate,this.edges.circular+=e.edges.circular,this},e.prototype.isolatedNodes=function(e){return this.nodes.isolated=e,this.nodes.total+=e,this},e.prototype.duplicateEdges=function(e){return this.edges.duplicate=e,this.edges.total+=e,this},e.prototype.circularEdges=function(e){return this.edges.circular=e,this.edges.total+=e,this},e}(),B=function(){function e(e){this.graph=e}return e.prototype.adjacentEdges=function(){return this.graph.edges.filter(function(e){return e.nodes[0]===this||e.nodes[1]===this},this)},e.prototype.adjacentNodes=function(){var e=[];return this.adjacentEdges().filter(function(e){return!e.isCircular()}).map(function(e){return e.nodes[0]===this?e.nodes[1]:e.nodes[0]},this).filter(function(t){return!(e.indexOf(t)>=0)&&e.push(t)},this)},e.prototype.isAdjacentToNode=function(e){return void 0!==this.graph.getEdgeConnectingNodes(this,e)},e.prototype.degree=function(){return this.graph.edges.map(function(e){var t=0;return e.nodes[0]===this&&(t+=1),e.nodes[1]===this&&(t+=1),t},this).reduce(function(e,t){return e+t})},e}(),I=function(){function e(e,t,n){this.graph=e,this.nodes=[t,n]}return e.prototype.adjacentEdges=function(){return this.graph.edges.filter(function(e){return e!==this&&(e.nodes[0]===this.nodes[0]||e.nodes[0]===this.nodes[1]||e.nodes[1]===this.nodes[0]||e.nodes[1]===this.nodes[1])},this)},e.prototype.adjacentNodes=function(){return[this.nodes[0],this.nodes[1]]},e.prototype.isAdjacentToEdge=function(e){return this.nodes[0]===e.nodes[0]||this.nodes[1]===e.nodes[1]||this.nodes[0]===e.nodes[1]||this.nodes[1]===e.nodes[0]},e.prototype.isSimilarToEdge=function(e){return this.nodes[0]===e.nodes[0]&&this.nodes[1]===e.nodes[1]||this.nodes[0]===e.nodes[1]&&this.nodes[1]===e.nodes[0]},e.prototype.otherNode=function(e){return this.nodes[0]===e?this.nodes[1]:this.nodes[1]===e?this.nodes[0]:void 0},e.prototype.isCircular=function(){return this.nodes[0]===this.nodes[1]},e.prototype.duplicateEdges=function(){return this.graph.edges.filter(function(e){return this.isSimilarToEdge(e)},this)},e.prototype.commonNodeWithEdge=function(e){if(this!==e)return this.nodes[0]===e.nodes[0]||this.nodes[0]===e.nodes[1]?this.nodes[0]:this.nodes[1]===e.nodes[0]||this.nodes[1]===e.nodes[1]?this.nodes[1]:void 0},e.prototype.uncommonNodeWithEdge=function(e){if(this!==e)return this.nodes[0]===e.nodes[0]||this.nodes[0]===e.nodes[1]?this.nodes[1]:this.nodes[1]===e.nodes[0]||this.nodes[1]===e.nodes[1]?this.nodes[0]:void 0},e}(),R=function(){function e(){this.nodeType=B,this.edgeType=I,this.clear()}return e.prototype.copy=function(){this.nodeArrayDidChange(),this.edgeArrayDidChange();for(var t=new e,n=0;n<this.nodes.length;n++){var i=t.addNode(new B(t));Object.assign(i,this.nodes[n]),i.graph=t,i.index=n}for(n=0;n<this.edges.length;n++){var o=[this.edges[n].nodes[0].index,this.edges[n].nodes[1].index],s=t.addEdge(new I(t,t.nodes[o[0]],t.nodes[o[1]]));Object.assign(s,this.edges[n]),s.graph=t,s.index=n,s.nodes=[t.nodes[o[0]],t.nodes[o[1]]]}return t},e.prototype.newNode=function(){return this.addNode(new this.nodeType(this))},e.prototype.newEdge=function(e,t){return this.addEdge(new this.edgeType(this,e,t))},e.prototype.addNode=function(e){if(void 0==e)throw"addNode() requires an argument: 1 GraphNode";return e.graph=this,e.index=this.nodes.length,this.nodes.push(e),e},e.prototype.addEdge=function(e){if(void 0!==e.nodes[0]&&void 0!==e.nodes[1]&&e.nodes[0].graph===this&&e.nodes[1].graph===this)return e.graph=this,e.index=this.edges.length,this.edges.push(e),e},e.prototype.addNodes=function(e){if(void 0===e||e.length<=0)throw"addNodes() must contain array of GraphNodes";var t=this.nodes.length,n=e.filter(function(e){return e instanceof B});this.nodes=this.nodes.concat(n);for(var i=t;i<this.nodes.length;i++)this.nodes[i].graph=this,this.nodes[i].index=i;return this.nodes.length-t},e.prototype.addEdges=function(e){if(void 0==e||e.length<=0)throw"addEdges() must contain array of GraphEdges";var t=this.edges.length,n=e.filter(function(e){return e instanceof I});this.edges=this.edges.concat(n);for(var i=t;i<this.edges.length;i++)this.edges[i].graph=this;return this.cleanGraph(),this.edges.length-t},e.prototype.copyNode=function(e){var t=Object.assign(this.newNode(),e);return this.addNode(t)},e.prototype.copyEdge=function(e){var t=Object.assign(this.newEdge(e.nodes[0],e.nodes[1]),e);return this.addEdge(t)},e.prototype.clear=function(){return this.nodes=[],this.edges=[],this},e.prototype.removeEdge=function(e){var t=this.edges.length;return this.edges=this.edges.filter(function(t){return t!==e}),this.edgeArrayDidChange(),new O(void 0,t-this.edges.length)},e.prototype.removeEdgeBetween=function(e,t){var n=this.edges.length;return this.edges=this.edges.filter(function(n){return!(n.nodes[0]===e&&n.nodes[1]===t||n.nodes[0]===t&&n.nodes[1]===e)}),this.edgeArrayDidChange(),new O(void 0,n-this.edges.length)},e.prototype.removeNode=function(e){var t=this.nodes.length,n=this.edges.length;return this.nodes=this.nodes.filter(function(t){return t!==e}),this.edges=this.edges.filter(function(t){return t.nodes[0]!==e&&t.nodes[1]!==e}),this.edges.length!=n&&this.edgeArrayDidChange(),this.nodes.length!=t&&this.nodeArrayDidChange(),new O(t-this.nodes.length,n-this.edges.length)},e.prototype.mergeNodes=function(e,t){if(e!==t){this.edges=this.edges.map(function(n){return n.nodes[0]===t&&(n.nodes[0]=e),n.nodes[1]===t&&(n.nodes[1]=e),n});var n=this.nodes.length;return this.nodes=this.nodes.filter(function(e){return e!==t}),new O(n-this.nodes.length).join(this.cleanGraph())}},e.prototype.removeIsolatedNodes=function(){this.nodeArrayDidChange();for(var e=[],t=0;t<this.nodes.length;t++)e[t]=!1;for(t=0;t<this.edges.length;t++)e[this.edges[t].nodes[0].index]=!0,e[this.edges[t].nodes[1].index]=!0;var n=this.nodes.length;this.nodes=this.nodes.filter(function(t,n){return e[n]});var i=n-this.nodes.length;return i>0&&this.nodeArrayDidChange(),(new O).isolatedNodes(i)},e.prototype.cleanCircularEdges=function(){var e=this.edges.length;return this.edges=this.edges.filter(function(e){return!(e.nodes[0]===e.nodes[1])}),this.edges.length!=e&&this.edgeArrayDidChange(),(new O).circularEdges(e-this.edges.length)},e.prototype.cleanDuplicateEdges=function(){for(var e=0,t=0;t<this.edges.length-1;t++)for(var n=this.edges.length-1;n>t;n--)this.edges[t].isSimilarToEdge(this.edges[n])&&(this.edges.splice(n,1),e+=1);return e>0&&this.edgeArrayDidChange(),(new O).duplicateEdges(e)},e.prototype.cleanGraph=function(){return this.edgeArrayDidChange(),this.nodeArrayDidChange(),this.cleanDuplicateEdges().join(this.cleanCircularEdges())},e.prototype.clean=function(){return this.cleanGraph()},e.prototype.getEdgeConnectingNodes=function(e,t){for(var n=0;n<this.edges.length;n++)if(this.edges[n].nodes[0]===e&&this.edges[n].nodes[1]===t||this.edges[n].nodes[0]===t&&this.edges[n].nodes[1]===e)return this.edges[n]},e.prototype.getEdgesConnectingNodes=function(e,t){return this.edges.filter(function(n){return n.nodes[0]===e&&n.nodes[1]===t||n.nodes[0]===t&&n.nodes[1]===e})},e.prototype.nodeArrayDidChange=function(){for(var e=0;e<this.nodes.length;e++)this.nodes[e].index=e},e.prototype.edgeArrayDidChange=function(){for(var e=0;e<this.edges.length;e++)this.edges[e].index=e},e}(),S=(function(e){function t(){return null!==e&&e.apply(this,arguments)||this}L(t,e),t.prototype.cleanGraph=function(){return this.edgeArrayDidChange(),this.nodeArrayDidChange(),new O}}(R),function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function i(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}()),W=function(e){function t(t,n){var i=e.call(this)||this;return i.edges={total:0,duplicate:0,circular:0},i.nodes={total:0,isolated:0,fragment:[],collinear:[],duplicate:[]},void 0!==t&&(i.nodes.total+=t),void 0!==n&&(i.edges.total+=n),i}return S(t,e),t.prototype.fragmentedNodes=function(e){return this.nodes.fragment=e,this.nodes.total+=e.length,this},t.prototype.collinearNodes=function(e){return this.nodes.collinear=e,this.nodes.total+=e.length,this},t.prototype.duplicateNodes=function(e){return this.nodes.duplicate=e,this.nodes.total+=e.length,this},t.prototype.join=function(e){this.nodes.total+=e.nodes.total,this.edges.total+=e.edges.total,this.nodes.isolated+=e.nodes.isolated,this.edges.duplicate+=e.edges.duplicate,this.edges.circular+=e.edges.circular;var t=e;return void 0!==t.nodes.fragment&&(this.nodes.fragment=this.nodes.fragment.concat(t.nodes.fragment)),void 0!==t.nodes.collinear&&(this.nodes.collinear=this.nodes.collinear.concat(t.nodes.collinear)),void 0!==t.nodes.duplicate&&(this.nodes.duplicate=this.nodes.duplicate.concat(t.nodes.duplicate)),this},t}(O),z=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.junctionType=V,t.sectorType=X,t.cache={},t}return S(t,e),t.prototype.adjacentEdges=function(){return this.graph.edges.filter(function(e){return e.nodes[0]===this||e.nodes[1]===this},this).map(function(e){var t=e.otherNode(this);return{edge:e,angle:Math.atan2(t.y-this.y,t.x-this.x)}},this).sort(function(e,t){return t.angle-e.angle}).map(function(e){return e.edge})},t.prototype.adjacentFaces=function(){var e=this.junction();return void 0===e?[]:e.faces()},t.prototype.interiorAngles=function(){return this.junction().interiorAngles()},t.prototype.junction=function(){var e=new this.junctionType(this);if(0!==e.edges.length)return e},t.prototype.position=function(e,t){return this.x=e,this.y=t,this},t.prototype.translate=function(e,t){return this.x+=e,this.y+=t,this},t.prototype.normalize=function(){var e=this.magnitude();return this.x/=e,this.y/=e,this},t.prototype.dot=function(e){return this.x*e.x+this.y*e.y},t.prototype.cross=function(e){return this.x*e.y-this.y*e.x},t.prototype.magnitude=function(){return Math.sqrt(this.x*this.x+this.y*this.y)},t.prototype.distanceTo=function(e){return Math.sqrt(Math.pow(this.x-e.x,2)+Math.pow(this.y-e.y,2))},t.prototype.equivalent=function(e,t){return new x(this.x,this.y).equivalent(e,t)},t.prototype.transform=function(e){var t=this.x,n=this.y;return this.x=t*e.a+n*e.c+e.tx,this.y=t*e.b+n*e.d+e.ty,this},t.prototype.rotate90=function(){var e=this.x;return this.x=-this.y,this.y=e,this},t.prototype.rotate270=function(){var e=this.x;return this.x=this.y,this.y=-e,this},t.prototype.rotate=function(e,t){var n=new x(this.x,this.y).rotate(e,t);return this.position(n.x,n.y)},t.prototype.lerp=function(e,t){var n=new x(this.x,this.y).lerp(e,t);return this.position(n.x,n.y)},t.prototype.angleLerp=function(e,t){var n=new x(this.x,this.y).angleLerp(e,t);return this.position(n.x,n.y)},t.prototype.reflect=function(e){var t=new x(this.x,this.y).reflect(e);return this.position(t.x,t.y)},t.prototype.scale=function(e){return this.x*=e,this.y*=e,this},t.prototype.add=function(e){return this.x+=e.x,this.y+=e.y,this},t.prototype.subtract=function(e){return this.x-=e.x,this.y-=e.y,this},t.prototype.multiply=function(e){return this.x*=e.x,this.y*=e.y,this},t.prototype.midpoint=function(e){return new x(.5*(this.x+e.x),.5*(this.y+e.y))},t.prototype.abs=function(){return this.x=Math.abs(this.x),this.y=Math.abs(this.y),this},t.prototype.commonX=function(e,t){return new x(this.x,this.y).commonX(new x(e.x,e.y),t)},t.prototype.commonY=function(e,t){return new x(this.x,this.y).commonY(new x(e.x,e.y),t)},t}(B),G=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return S(t,e),t.prototype.adjacentFaces=function(){return[new this.graph.faceType(this.graph).makeFromCircuit(this.graph.walkClockwiseCircut(this.nodes[0],this.nodes[1])),new this.graph.faceType(this.graph).makeFromCircuit(this.graph.walkClockwiseCircut(this.nodes[1],this.nodes[0]))].filter(function(e){return void 0!==e})},t.prototype.crossingEdges=function(){var e=this.nodes[0].x<this.nodes[1].x?this.nodes[0].x:this.nodes[1].x,t=this.nodes[0].x>this.nodes[1].x?this.nodes[0].x:this.nodes[1].x,n=this.nodes[0].y<this.nodes[1].y?this.nodes[0].y:this.nodes[1].y,i=this.nodes[0].y>this.nodes[1].y?this.nodes[0].y:this.nodes[1].y;return this.graph.edges.filter(function(o){return!(o.nodes[0].x<e&&o.nodes[1].x<e||o.nodes[0].x>t&&o.nodes[1].x>t||o.nodes[0].y<n&&o.nodes[1].y<n||o.nodes[0].y>i&&o.nodes[1].y>i)},this).filter(function(e){return this!==e},this).map(function(e){return this.intersection(e)},this).filter(function(e){return void 0!=e}).sort(function(e,t){return e.commonX(t)?e.y-t.y:e.x-t.x})},t.prototype.absoluteAngle=function(e){void 0===e&&(e=this.nodes[1]);var t=this.otherNode(e);return Math.atan2(t.y-e.y,t.x-e.x)},t.prototype.length=function(){return this.nodes[0].distanceTo(this.nodes[1])},t.prototype.vector=function(e){var t=e||this.nodes[0],n=this.otherNode(t);return new x(n.x,n.y).subtract(t)},t.prototype.parallel=function(e,t){return new b(this).parallel(new b(e),t)},t.prototype.collinear=function(e,t){return new b(this).collinear(e,t)},t.prototype.equivalent=function(e,t){return this.isSimilarToEdge(e)},t.prototype.intersection=function(e,n){if(!(e instanceof t&&this.isAdjacentToEdge(e))){var i=new b(this.nodes[0].x,this.nodes[0].y,this.nodes[1].x,this.nodes[1].y),o=new b(e.nodes[0].x,e.nodes[0].y,e.nodes[1].x,e.nodes[1].y),s=i.intersection(o,n);if(void 0!==s&&!s.equivalent(this.nodes[0],n)&&!s.equivalent(this.nodes[1],n))return{edge:e,point:s}}},t.prototype.reflectionMatrix=function(){return new b(this.nodes[0],this.nodes[1]).reflectionMatrix()},t.prototype.nearestPoint=function(e){var t=this.nearestPointNormalTo(e);return void 0!==t?t:this.nodes.map(function(t){return{point:t,distance:t.distanceTo(e)}},this).sort(function(e,t){return e.distance-t.distance}).shift().point},t.prototype.nearestPointNormalTo=function(e){var t=this.nodes[0].distanceTo(this.nodes[1]),n=((e.x-this.nodes[0].x)*(this.nodes[1].x-this.nodes[0].x)+(e.y-this.nodes[0].y)*(this.nodes[1].y-this.nodes[0].y))/Math.pow(t,2);if(!(n<0||n>1))return new x(this.nodes[0].x+n*(this.nodes[1].x-this.nodes[0].x),this.nodes[0].y+n*(this.nodes[1].y-this.nodes[0].y))},t.prototype.transform=function(e){return this.nodes[0].transform(e),this.nodes[1].transform(e),this},t.prototype.degenrate=function(e){return this.nodes[0].equivalent(this.nodes[1],e)},t.prototype.midpoint=function(){return new x(.5*(this.nodes[0].x+this.nodes[1].x),.5*(this.nodes[0].y+this.nodes[1].y))},t.prototype.perpendicularBisector=function(){return new m(this.midpoint(),this.vector().rotate90())},t.prototype.infiniteLine=function(){var e=new x(this.nodes[0].x,this.nodes[0].y),t=new x(this.nodes[1].x,this.nodes[1].y).subtract(e);return new m(e,t)},t}(I),U=function(){function e(e){this.graph=e,this.nodes=[],this.edges=[],this.angles=[]}return e.prototype.makeFromCircuit=function(e){if(!(void 0==e||e.length<3)){this.edges=e,this.nodes=e.map(function(t,n){return t.uncommonNodeWithEdge(e[(n+1)%e.length])});var t=this.nodes[0].sectorType;this.sectors=this.edges.map(function(e,n){var i=(n+1)%this.edges.length;e.commonNodeWithEdge(this.edges[i]),e.uncommonNodeWithEdge(this.edges[i]),this.edges[i].uncommonNodeWithEdge(e);return new t(e,this.edges[i])},this),this.angles=this.sectors.map(function(e){return e.angle()});var n=this.angles.reduce(function(e,t){return e+t},0);return this.nodes.length>2&&Math.abs(n/(this.nodes.length-2)-Math.PI)<1e-5?this:void 0}},e.prototype.makeFromNodes=function(e){var t=e.map(function(e,t){var n=this.nodes[(t+1)%this.nodes.length];return this.graph.getEdgeConnectingNodes(e,n)},this);return this.makeFromCircuit(t)},e.prototype.equivalent=function(e){if(e.nodes.length!=this.nodes.length)return!1;for(var t=void 0,n=0;n<this.nodes.length;n++)if(this.nodes[0]===e.nodes[n]){t=n;break}if(void 0==t)return!1;for(n=0;n<this.nodes.length;n++){var i=(t+n)%this.nodes.length;if(this.nodes[n]!==e.nodes[i])return!1}return!0},e.prototype.commonEdge=function(e){for(var t=0;t<this.edges.length;t++)for(var n=0;n<e.edges.length;n++)if(this.edges[t]===e.edges[n])return this.edges[t]},e.prototype.edgeAdjacentFaces=function(){return this.edges.map(function(e){for(var t=this.graph.faces.filter(function(e){return!this.equivalent(e)},this),n=0;n<t.length;n++){if(t[n].edges.filter(function(t){return e===t}).length>0)return t[n]}},this).filter(function(e){return void 0!==e})},e.prototype.contains=function(e){for(var t=0;t<this.edges.length;t++){var n=this.edges[t].nodes;if((e.y-n[0].y)*(n[1].x-n[0].x)-(e.x-n[0].x)*(n[1].y-n[0].y)<0)return!1}return!0},e.prototype.transform=function(e){for(var t=0;t<this.nodes.length;t++)this.nodes[t].transform(e)},e.prototype.adjacencyTree=function(){0===this.graph.faces.length?this.graph.generateFaces():this.graph.faceArrayDidChange();var e=[],t=[[{face:this,parent:void 0}]];do{var n=[];t[t.length-1].forEach(function(t){n.concat(t.face.edgeAdjacentFaces().filter(function(t){return 0==e.filter(function(e){return e===t},this).length},this).map(function(n){return e.push(n),{face:n,parent:t}},this))}),t[t.length]=n}while(t[t.length-1].length>0);return t},e}(),X=function(e){function t(t,n){var i=e.call(this,t.commonNodeWithEdge(n),void 0)||this;return void 0===i.origin?i:t===n?i:(i.edges=[t,n],i.endPoints=[t.nodes[0]===i.origin?t.nodes[1]:t.nodes[0],n.nodes[0]===i.origin?n.nodes[1]:n.nodes[0]],i)}return S(t,e),t.prototype.makeWithEdges=function(e,t){if(this.origin=e.commonNodeWithEdge(t),void 0!==this.origin&&e!==t)return this.edges=[e,t],this.endPoints=[e.nodes[0]===this.origin?e.nodes[1]:e.nodes[0],t.nodes[0]===this.origin?t.nodes[1]:t.nodes[0]],this},t.prototype.equivalent=function(e){return e.edges[0].isSimilarToEdge(this.edges[0])&&e.edges[1].isSimilarToEdge(this.edges[1])||e.edges[0].isSimilarToEdge(this.edges[1])&&e.edges[1].isSimilarToEdge(this.edges[0])},t}(j),V=function(){function e(e){this.origin=e,this.sectors=[],this.edges=[],void 0!==e&&(this.edges=this.origin.adjacentEdges(),this.edges.length<=1||(this.sectors=this.edges.map(function(e,t){var n=this.edges[(t+1)%this.edges.length];e.commonNodeWithEdge(n),n.uncommonNodeWithEdge(e),e.uncommonNodeWithEdge(n);return new this.origin.sectorType(e,n)},this)))}return e.prototype.edgeVectorsNormalized=function(){return this.edges.map(function(e){return e.vector(this.origin).normalize()},this)},e.prototype.edgeAngles=function(){return this.edges.map(function(e){return e.absoluteAngle(this.origin)},this)},e.prototype.sectorWithEdges=function(e,t){var n=void 0;return this.sectors.forEach(function(i){if(i.edges[0].equivalent(e)&&i.edges[1].equivalent(t)||i.edges[1].equivalent(e)&&i.edges[0].equivalent(t))return n=i},this),n},e.prototype.interiorAngles=function(){return this.sectors.map(function(e){return e.angle()},this)},e.prototype.clockwiseNode=function(e){for(var t=0;t<this.edges.length;t++)if(this.edges[t].otherNode(this.origin)===e)return this.edges[(t+1)%this.edges.length].otherNode(this.origin)},e.prototype.clockwiseEdge=function(e){var t=this.edges.indexOf(e);if(-1!==t)return this.edges[(t+1)%this.edges.length]},e.prototype.faces=function(){for(var e=[],t=0;t<this.edges.length;t++){var n=this.origin.graph.walkClockwiseCircut(this.origin,this.edges[t].otherNode(this.origin)),i=new this.origin.graph.faceType(this.origin.graph).makeFromCircuit(n);void 0!==i&&e.push(i)}return e},e}(),Y=function(e){function t(){var t=e.call(this)||this;return t.nodeType=z,t.edgeType=G,t.faceType=U,t.properties={optimization:0},t.clear(),t}return S(t,e),t.prototype.copy=function(){this.nodeArrayDidChange(),this.edgeArrayDidChange();for(var e=new t,n=0;n<this.nodes.length;n++){var i=e.addNode(new z(e));Object.assign(i,this.nodes[n]),i.graph=e,i.index=n}for(n=0;n<this.edges.length;n++){var o=[this.edges[n].nodes[0].index,this.edges[n].nodes[1].index],s=e.addEdge(new G(e,e.nodes[o[0]],e.nodes[o[1]]));Object.assign(s,this.edges[n]),s.graph=e,s.index=n,s.nodes=[e.nodes[o[0]],e.nodes[o[1]]]}for(n=0;n<this.faces.length;n++){var r=new U(e);Object.assign(r,this.faces[n]);for(var a=0;a<this.faces[n].nodes.length;a++)r.nodes.push(r.nodes[this.faces[n].nodes[a].index]);for(a=0;a<this.faces[n].edges.length;a++)r.edges.push(r.edges[this.faces[n].edges[a].index]);for(a=0;a<this.faces[n].angles.length;a++)r.angles.push(this.faces[n].angles[a]);r.graph=e,e.faces.push(r)}return e},t.prototype.newPlanarNode=function(e,t){return this.newNode().position(e,t)},t.prototype.newPlanarEdge=function(e,t,n,i){var o=this.newNode().position(e,t),s=this.newNode().position(n,i);return this.newEdge(o,s)},t.prototype.newPlanarEdgeFromNode=function(e,t,n){var i=this.newNode().position(t,n);return this.newEdge(e,i)},t.prototype.newPlanarEdgeBetweenNodes=function(e,t){return this.newEdge(e,t)},t.prototype.newPlanarEdgeRadiallyFromNode=function(e,t,n){var i=this.copyNode(e).translate(Math.cos(t)*n,Math.sin(t)*n);return this.newEdge(e,i)},t.prototype.clear=function(){return this.nodes=[],this.edges=[],this.faces=[],this},t.prototype.removeEdge=function(e){var t=this.edges.length,n=[e.nodes[0],e.nodes[1]];return this.edges=this.edges.filter(function(t){return t!==e}),this.edgeArrayDidChange(),this.cleanNodeIfUseless(n[0]),this.cleanNodeIfUseless(n[1]),new W(void 0,t-this.edges.length)},t.prototype.removeEdgeBetween=function(e,t){var n=this.edges.length;return this.edges=this.edges.filter(function(n){return!(n.nodes[0]===e&&n.nodes[1]===t||n.nodes[0]===t&&n.nodes[1]===e)}),this.edgeArrayDidChange(),new W(void 0,n-this.edges.length).join(this.cleanNodeIfUseless(e)).join(this.cleanNodeIfUseless(t))},t.prototype.cleanNodeIfUseless=function(e){var t=e.adjacentEdges();switch(t.length){case 0:return this.removeNode(e);case 2:var n=[t[0].uncommonNodeWithEdge(t[1]),t[1].uncommonNodeWithEdge(t[0])];if(new b(n[0],n[1]).collinear(e))return t[0].nodes=[n[0],n[1]],this.removeEdge(t[1]),this.removeNode(e),new W(1,1)}return new W},t.prototype.cleanAllUselessNodes=function(){this.nodes.forEach(function(e){e.cache.adjacentEdges=[]}),this.edges.forEach(function(e){e.nodes[0].cache.adjacentEdges.push(e),e.nodes[1].cache.adjacentEdges.push(e)});var e=(new W).join(this.removeIsolatedNodes());this.nodeArrayDidChange(),this.edgeArrayDidChange();for(var t=this.nodes.length-1;t>=0;t--){var n=this.nodes[t].cache.adjacentEdges;switch(n.length){case 0:e.join(this.removeNode(this.nodes[t]));break;case 2:var i=[n[0].uncommonNodeWithEdge(n[1]),n[1].uncommonNodeWithEdge(n[0])];new b(i[0],i[1]).collinear(this.nodes[t])&&(n[0].nodes=[i[0],i[1]],this.edges.splice(n[1].index,1),this.edgeArrayDidChange(),this.nodes.splice(this.nodes[t].index,1),this.nodeArrayDidChange(),e.join(new W(1,1)))}}return this.nodes.forEach(function(e){e.cache.adjacentEdges=void 0}),e},t.prototype.cleanDuplicateNodes=function(e){void 0===e&&(e=1e-8);var t=rbush(),n=this.nodes.map(function(t){return{minX:t.x-e,minY:t.y-e,maxX:t.x+e,maxY:t.y+e,node:t}});t.load(n);var i=this;function o(e,t){return i.edges.forEach(function(n){n.nodes[0]===t&&(n.nodes[0]=e),n.nodes[1]===t&&(n.nodes[1]=e)}),i.nodes=i.nodes.filter(function(e){return e!==t}),(new W).duplicateNodes([new x(t.x,t.y)]).join(i.cleanGraph())}for(var s=new W,r=0;r<this.nodes.length;r++)for(var a=t.search({minX:this.nodes[r].x-e,minY:this.nodes[r].y-e,maxX:this.nodes[r].x+e,maxY:this.nodes[r].y+e}),d=0;d<a.length;d++)this.nodes[r]!==a[d].node&&s.join(o(this.nodes[r],a[d].node));return s},t.prototype.clean=function(e){var t=new W;return t.join(this.cleanDuplicateNodes(e)),t.join(this.fragment()),t.join(this.cleanDuplicateNodes(e)),t.join(this.cleanGraph()),t.join(this.cleanAllUselessNodes()),t},t.prototype.fragment=function(){var e=this;function t(){for(var t=new W,n=0;n<e.edges.length;n++){var i=e.fragmentEdge(e.edges[n]);t.join(i),i.nodes.fragment.length>0&&(t.join(e.cleanGraph()),t.join(e.cleanAllUselessNodes()),t.join(e.cleanDuplicateNodes()))}return t}var n,i=0,o=new W;do{n=t(),o.join(n),i+=1}while(0!=n.nodes.fragment.length&&i<5e3);if(i>=5e3)throw"exiting fragment(). potential infinite loop detected";return o},t.prototype.fragmentEdge=function(e){var t=new W,n=e.crossingEdges();if(0===n.length)return t;t.nodes.fragment=n.map(function(e){return new x(e.point.x,e.point.y)});for(var i=e.nodes.sort(function(e,t){return e.commonX(t)?e.y-t.y:e.x-t.x}),o=[],s=0;s<n.length;s++)if(void 0!=n[s]){var r=this.newNode().position(n[s].point.x,n[s].point.y);this.copyEdge(n[s].edge).nodes=[r,n[s].edge.nodes[1]],n[s].edge.nodes[1]=r,o.push(r)}this.copyEdge(e).nodes=[i[0],o[0]];for(s=0;s<o.length-1;s++)this.copyEdge(e).nodes=[o[s],o[s+1]];return this.copyEdge(e).nodes=[o[o.length-1],i[1]],this.removeEdge(e),t.join(this.cleanGraph()),t},t.prototype.walkClockwiseCircut=function(e,t){if(void 0!==e&&void 0!==t){var n=e.graph.getEdgeConnectingNodes(e,t);if(void 0!=n){var i=[],o=e,s=t,r=[o],a=n;i.push(a);do{r.push(s);var d=s.junction();if(void 0!==d&&(a=d.clockwiseEdge(a)),i.push(a),o=s,(s=a.otherNode(o))===e)return i}while(!(r.filter(function(e){return e===s}).length>0))}}},t.prototype.bounds=function(){if(void 0!==this.nodes&&0!==this.nodes.length){var e=1/0,t=-1/0,n=1/0,i=-1/0;return this.nodes.forEach(function(o){o.x>t&&(t=o.x),o.x<e&&(e=o.x),o.y>i&&(i=o.y),o.y<n&&(n=o.y)}),new N(e,n,t-e,i-n)}},t.prototype.getEdgeIntersections=function(e){for(var t=[],n=0;n<this.edges.length-1;n++)for(var i=n+1;i<this.edges.length;i++){var o=this.edges[n].intersection(this.edges[i],e);if(void 0!=o){for(var s=!1,r=0;r<t.length;r++)o.point.equivalent(t[r],e)&&(s=!0);s||t.push(o.point)}}return t},t.prototype.faceArrayDidChange=function(){for(var e=0;e<this.faces.length;e++)this.faces[e].index=e},t.prototype.generateFaces=function(){this.faces=[],this.clean();for(var e=0;e<this.nodes.length;e++)for(var t=this.nodes[e].adjacentFaces(),n=0;n<t.length;n++){for(var i=!1,o=0;o<this.faces.length;o++)if(this.faces[o].equivalent(t[n])){i=!0;break}i||this.faces.push(t[n])}return this.faceArrayDidChange(),this.faces},t.prototype.edgeExistsThroughPoints=function(e,t){for(var n=0;n<this.edges.length;n++)if(console.log(e),console.log(this.edges[n].nodes[0]),e.equivalent(this.edges[n].nodes[0])&&t.equivalent(this.edges[n].nodes[1])||e.equivalent(this.edges[n].nodes[1])&&t.equivalent(this.edges[n].nodes[0]))return!0;return!1},t.prototype.fewestPolylines=function(){var e=this.copy();e.clean(),e.removeIsolatedNodes();for(var t=[];e.edges.length>0;){var n=e.nodes[0],i=n.adjacentNodes(),o=new P;if(0===i.length)e.removeIsolatedNodes();else{var s=i[0];e.getEdgeConnectingNodes(n,s);for(o.nodes.push(new x(n.x,n.y)),e.edges=e.edges.filter(function(e){return!(e.nodes[0]===n&&e.nodes[1]===s||e.nodes[0]===s&&e.nodes[1]===n)}),e.removeIsolatedNodes(),i=[],void 0!==(n=s)&&(i=n.adjacentNodes());i.length>0;)s=i[0],o.nodes.push(new x(n.x,n.y)),e.edges=e.edges.filter(function(e){return!(e.nodes[0]===n&&e.nodes[1]===s||e.nodes[0]===s&&e.nodes[1]===n)}),e.removeIsolatedNodes(),i=(n=s).adjacentNodes();o.nodes.push(new x(n.x,n.y))}t.push(o)}return t},t}(R),H=function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function i(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}();function K(e){return void 0!==e&&!isNaN(e.x)&&!isNaN(e.y)}function J(e){return void 0!==e&&!isNaN(e)&&!isNaN(e)}function Q(e,t){return K(e)?new x(e.x,e.y):J(t)?new x(e,t):e.constructor===Array?new x(e[0],e[1]):void 0}function Z(e,t,n,i){return e instanceof b?e:void 0!==e.nodes?new b(e.nodes[0],e.nodes[1]):K(t)?new b(e,t):J(i)?new b(e,t,n,i):void 0}function $(e,t,n,i){return e instanceof E?e:K(t)?new E(e,t):J(i)?new E(new x(e,t),new x(n,i)):void 0}function ee(e,t,n,i){return e instanceof m?e:K(t)?new m(e,t):J(i)?new m(e,t,n,i):e.nodes instanceof Array&&e.nodes.length>0&&K(e.nodes[1])?new m(e.nodes[0].x,e.nodes[0].y,e.nodes[1].x,e.nodes[1].y):void 0}!function(e){e[e.mark=0]="mark",e[e.border=1]="border",e[e.mountain=2]="mountain",e[e.valley=3]="valley"}(v||(v={}));var te;!function(e){e[e.ray=0]="ray",e[e.doubleRay=1]="doubleRay",e[e.endpoints=2]="endpoints",e[e.axiom1=3]="axiom1",e[e.axiom2=4]="axiom2",e[e.axiom3=5]="axiom3",e[e.axiom4=6]="axiom4",e[e.axiom5=7]="axiom5",e[e.axiom6=8]="axiom6",e[e.axiom7=9]="axiom7"}(te||(te={}));var ne,ie=function(){return function(){this.endPoints=[],this.intersections=[]}}();!function(e){e[e.position=0]="position",e[e.newLine=1]="newLine"}(ne||(ne={}));var oe=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return H(t,e),t.prototype.kawasakiFourth=function(){var e=this.origin.junction();if(3==e.edges.length){for(var t=void 0,n=0;n<e.sectors.length;n++)this.equivalent(e.sectors[n])&&(t=n);if(void 0!==t){var i=0;for(n=0;n<e.sectors.length-1;n++){var o=(n+t+1)%e.sectors.length;n%2==0?i+=e.sectors[o].angle():e.sectors[o].angle()}var s=Math.PI-i,r=this.edges[0].absoluteAngle(this.origin)-s;return new x(Math.cos(r),Math.sin(r))}}},t}(X),se=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return H(t,e),t.prototype.flatFoldable=function(e){return this.kawasaki()&&this.maekawa()},t.prototype.alternateAngleSum=function(){if(this.sectors.length%2==0){var e=[0,0];return this.sectors.forEach(function(t,n){e[n%2]+=t.angle()}),e}},t.prototype.maekawa=function(){return!0},t.prototype.kawasaki=function(e){void 0===e&&(e=1e-8);var t=this.alternateAngleSum();return Math.abs(t[0]-t[1])<e},t.prototype.kawasakiRating=function(){var e=this.alternateAngleSum();return Math.abs(e[0]-e[1])},t.prototype.kawasakiSolution=function(){var e=this.alternateAngleSum().map(function(e){return{difference:Math.PI-e,sectors:[]}});return this.sectors.forEach(function(t,n){e[n%2].sectors.push(t)}),e},t.prototype.kawasakiFourth=function(e){if(3==this.edges.length){for(var t=void 0,n=0;n<this.sectors.length;n++)e.equivalent(this.sectors[n])&&(t=n);if(void 0!==t){var i=0;for(n=0;n<this.sectors.length-1;n++){var o=(n+t+1)%this.sectors.length;n%2==0?i+=this.sectors[o].angle():this.sectors[o].angle()}var s=Math.PI-i,r=e.edges[0].absoluteAngle(e.origin)-s;return new x(Math.cos(r),Math.sin(r))}}},t}(V),re=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.junctionType=se,t.sectorType=oe,t}return H(t,e),t.prototype.isBoundary=function(){return this.graph.boundary.liesOnEdge(this)},t.prototype.alternateAngleSum=function(){return this.junction().alternateAngleSum()},t.prototype.kawasakiRating=function(){return this.junction().kawasakiRating()},t.prototype.flatFoldable=function(e){return!!this.isBoundary()||this.junction().flatFoldable(e)},t.prototype.kawasakiFourth=function(e,t){var n=this.junction(),i=n.sectorWithEdges(e,t);if(void 0!==i)return n.kawasakiFourth(i)},t}(z),ae=function(e){function t(t,n,i){var o=e.call(this,t,n,i)||this;return o.orientation=v.mark,o.newMadeBy=new ie,o.newMadeBy.endPoints=[n,i],o}return H(t,e),t.prototype.mark=function(){return this.orientation=v.mark,this},t.prototype.mountain=function(){return this.orientation=v.mountain,this},t.prototype.valley=function(){return this.orientation=v.valley,this},t.prototype.border=function(){return this.orientation=v.border,this},t.prototype.creaseToEdge=function(e){return this.graph.creaseEdgeToEdge(this,e)},t}(G),de=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return H(t,e),t.prototype.rabbitEar=function(){if(3!==this.sectors.length)return[];var e=this.sectors.map(function(e){return new E(e.origin,e.bisect())}),t=e.map(function(t,n){var i=e[(n+1)%e.length];return t.intersection(i)}).reduce(function(e,t){return e.add(t)}).scale(1/e.length);return this.nodes.map(function(e){return this.graph.crease(e,t)},this)},t}(U),he=function(e){function t(){var t=e.call(this)||this;return t.symmetryLine=void 0,t.nodeType=re,t.edgeType=ae,t.faceType=de,void 0===t.boundary&&(t.boundary=new A),t.square(),t}return H(t,e),t.prototype.copy=function(){this.nodeArrayDidChange(),this.edgeArrayDidChange(),this.faceArrayDidChange();var e=new t;e.nodes=[],e.edges=[],e.faces=[],e.boundary=void 0;for(var n=0;n<this.nodes.length;n++){var i=e.addNode(new re(e));Object.assign(i,this.nodes[n]),i.graph=e,i.index=n}for(n=0;n<this.edges.length;n++){var o=[this.edges[n].nodes[0].index,this.edges[n].nodes[1].index],s=e.addEdge(new ae(e,e.nodes[o[0]],e.nodes[o[1]]));Object.assign(s,this.edges[n]),s.graph=e,s.index=n,s.nodes=[e.nodes[o[0]],e.nodes[o[1]]]}for(n=0;n<this.faces.length;n++){var r=new U(e);if(e.faces.push(r),r.graph=e,r.index=n,void 0!==this.faces[n]){if(void 0!==this.faces[n].nodes)for(var a=0;a<this.faces[n].nodes.length;a++){var d=this.faces[n].nodes[a].index;r.nodes.push(e.nodes[d])}if(void 0!==this.faces[n].edges)for(a=0;a<this.faces[n].edges.length;a++){var h=this.faces[n].edges[a].index;r.edges.push(e.edges[h])}if(void 0!==this.faces[n].angles)for(a=0;a<this.faces[n].angles.length;a++)r.angles.push(this.faces[n].angles[a])}}return e.boundary=this.boundary.copy(),e},t.prototype.fold=function(e,t,n,i){},t.prototype.foldInHalf=function(){},t.prototype.newCrease=function(e,t,n,i){this.creaseSymmetry(e,t,n,i);var o=this.newPlanarEdge(e,t,n,i);return void 0!==this.didChange&&this.didChange(void 0),o},t.prototype.creaseSymmetry=function(e,t,n,i){if(void 0!==this.symmetryLine){var o=new x(e,t).reflect(this.symmetryLine),s=new x(n,i).reflect(this.symmetryLine);return this.newPlanarEdge(o.x,o.y,s.x,s.y)}},t.prototype.crease=function(e,t,n,i){var o=Z(e,t,n,i);if(void 0!==o){var s=this.boundary.clipEdge(o);if(void 0!==s)return this.newCrease(s.nodes[0].x,s.nodes[0].y,s.nodes[1].x,s.nodes[1].y)}},t.prototype.creaseRay=function(e,t,n,i){var o=$(e,t,n,i);if(void 0!==o){var s=this.boundary.clipRay(o);if(void 0!==s)return this.newCrease(s.nodes[0].x,s.nodes[0].y,s.nodes[1].x,s.nodes[1].y)}},t.prototype.creaseRayUntilIntersection=function(e,t){var n=e.clipWithEdgesDetails(this.edges);if(n.length>0){if(void 0!==t){var i=new b(e.origin.x,e.origin.y,t.x,t.y);if(n[0].edge.length()>i.length())return this.crease(i)}return this.crease(n[0].edge)}},t.prototype.creaseLineRepeat=function(e,t,n,i){var o=$(e,t,n,i);return this.creaseRayRepeat(o).concat(this.creaseRayRepeat(o.flip()))},t.prototype.creaseRayRepeat=function(e,t){return(new P).rayReflectRepeat(e,this.edges,t).edges().map(function(e){return this.crease(e)},this).filter(function(e){return void 0!=e})},t.prototype.creaseThroughPoints=function(e,t,n,i){var o=Z(e,t,n,i);if(void 0!==o){var s=this.boundary.clipLine(o.infiniteLine());if(void 0!==s)return this.newCrease(s.nodes[0].x,s.nodes[0].y,s.nodes[1].x,s.nodes[1].y)}},t.prototype.creasePointToPoint=function(e,t,n,i){var o=Z(e,t,n,i);if(void 0!==o){var s=this.boundary.clipLine(o.perpendicularBisector());if(void 0!==s)return this.newCrease(s.nodes[0].x,s.nodes[0].y,s.nodes[1].x,s.nodes[1].y)}},t.prototype.creaseEdgeToEdge=function(e,t){var n=ee(e),i=ee(t);return n.bisect(i).map(function(e){var t=this.boundary.clipLine(e);return this.newCrease(t.nodes[0].x,t.nodes[0].y,t.nodes[1].x,t.nodes[1].y)},this)},t.prototype.creasePerpendicularThroughPoint=function(e,t){var n=this.boundary.clipLine(new m(t,e.vector().rotate90()));if(void 0!==n)return this.newCrease(n.nodes[0].x,n.nodes[0].y,n.nodes[1].x,n.nodes[1].y)},t.prototype.creasePointToLine=function(e,t,n){for(var i=Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2)),o=new k(e.x,e.y,i).intersection(new b(n)),s=[],r=0;r<o.length;r++)s.push(this.creasePointToPoint(t,o[r]));return s},t.prototype.creasePerpendicularPointOntoLine=function(e,t,n){var i=new m(e,new x(n.nodes[1].x-n.nodes[0].x,n.nodes[1].y-n.nodes[0].y)).intersection(t.infiniteLine());if(void 0!==i){var o=this.boundary.clipLine(new b(e,i).perpendicularBisector());if(void 0!==o)return this.newCrease(o.nodes[0].x,o.nodes[0].y,o.nodes[1].x,o.nodes[1].y)}},t.prototype.pleat=function(e,t,n){var i,o,s,r,a,d=new b(e.nodes[0].x,e.nodes[0].y,e.nodes[1].x,e.nodes[1].y),h=new b(t.nodes[0].x,t.nodes[0].y,t.nodes[1].x,t.nodes[1].y);if(d.parallel(h))return i=d.nodes[0].subtract(d.nodes[1]),o=h.nodes[0].subtract(h.nodes[1]),Array.apply(null,Array(n-1)).map(function(e,t){return(t+1)/n},this).map(function(e){var t=d.nodes[0].lerp(h.nodes[0],e);return this.boundary.clipLine(new m(t,i))},this).filter(function(e){return void 0!==e},this).map(function(e){return this.newCrease(e.nodes[0].x,e.nodes[0].y,e.nodes[1].x,e.nodes[1].y)},this);if(d.nodes[0].equivalent(h.nodes[0])||d.nodes[0].equivalent(h.nodes[1])||d.nodes[1].equivalent(h.nodes[0])||d.nodes[1].equivalent(h.nodes[1]))return d.nodes[0].equivalent(h.nodes[0])&&(s=d.nodes[0],r=d.nodes[1],a=h.nodes[1]),d.nodes[0].equivalent(h.nodes[1])&&(s=d.nodes[0],r=d.nodes[1],a=h.nodes[0]),d.nodes[1].equivalent(h.nodes[0])&&(s=d.nodes[1],r=d.nodes[0],a=h.nodes[1]),d.nodes[1].equivalent(h.nodes[1])&&(s=d.nodes[1],r=d.nodes[0],a=h.nodes[0]),i=r.subtract(s),o=a.subtract(s),Array.apply(null,Array(n-1)).map(function(e,t){return(t+1)/n},this).map(function(e){var t=i.angleLerp(o,e);return this.boundary.clipLine(new m(s,t))},this).filter(function(e){return void 0!==e},this).map(function(e){return this.newCrease(e.nodes[0].x,e.nodes[0].y,e.nodes[1].x,e.nodes[1].y)},this);var u=d.infiniteLine().intersection(h.infiniteLine());return i=d.nodes[0].equivalent(u)?d.nodes[1].subtract(u):d.nodes[0].subtract(u),o=h.nodes[0].equivalent(u)?h.nodes[1].subtract(u):h.nodes[0].subtract(u),Array.apply(null,Array(n-1)).map(function(e,t){return(t+1)/n},this).map(function(e){var t=i.angleLerp(o,e);return this.boundary.clipLine(new m(u,t))},this).filter(function(e){return void 0!==e},this).map(function(e){return this.newCrease(e.nodes[0].x,e.nodes[0].y,e.nodes[1].x,e.nodes[1].y)},this)},t.prototype.coolPleat=function(e,t,n){var i=new b(e.nodes[0].x,e.nodes[0].y,e.nodes[1].x,e.nodes[1].y),o=new b(t.nodes[0].x,t.nodes[0].y,t.nodes[1].x,t.nodes[1].y),s=i.nodes[0].subtract(i.nodes[1]),r=o.nodes[0].subtract(o.nodes[1]);return Array.apply(null,Array(n-1)).map(function(e,t){return(t+1)/n},this).map(function(e){var t=i.nodes[0].lerp(o.nodes[0],e),n=s.lerp(r,e);return this.boundary.clipLine(new m(t,n))},this).filter(function(e){return void 0!==e},this).map(function(e){return this.newCrease(e.nodes[0].x,e.nodes[0].y,e.nodes[1].x,e.nodes[1].y)},this)},t.prototype.creaseVoronoi=function(e,t){void 0===t&&(t=.5);var n=e.edges.filter(function(e){return!e.isBoundary}),i=e.cells.map(function(e){return e.edges.map(function(n){return n.endPoints.map(function(n){return e.site.lerp(n,t)})},this)},this),o=e.generateSortedMolecules(t);return o.forEach(function(e){e.forEach(function(e){e.generateCreases().forEach(function(e){this.crease(e.nodes[0],e.nodes[1])},this)},this)},this),n.forEach(function(e){var t=this.crease(e.endPoints[0],e.endPoints[1]);void 0!==t&&t.valley()},this),i.forEach(function(e){e.forEach(function(e){this.crease(e[0],e[1]).mountain()},this)},this),o.reduce(function(e,t){return e.concat(t)})},t.prototype.availableAxiomFolds=function(e){return void 0===e&&(e=this),this.availableAxiom1Folds(e),this.availableAxiom2Folds(e),this.availableAxiom3Folds(e),e},t.prototype.availableAxiom1Folds=function(e){void 0===e&&(e=this);for(var t=0;t<this.nodes.length-1;t++)for(var n=t+1;n<this.nodes.length;n++)this.creaseThroughPoints(this.nodes[t],this.nodes[n]);return this},t.prototype.availableAxiom2Folds=function(e){void 0===e&&(e=this);for(var t=0;t<this.nodes.length-1;t++)for(var n=t+1;n<this.nodes.length;n++)this.creasePointToPoint(this.nodes[t],this.nodes[n]);return this},t.prototype.availableAxiom3Folds=function(e){void 0===e&&(e=this);for(var t=0;t<this.nodes.length-1;t++)for(var n=t+1;n<this.nodes.length;n++)this.creasePointToPoint(this.nodes[t],this.nodes[n]);return this},t.prototype.wiggle=function(e){void 0===e&&(e=1e-5);this.edges.forEach(function(e,t){return e.length()});for(var t=0,n=0;n<this.nodes.length;n++){var i=this.nodes[n].kawasakiRating();if(i>e){t++;for(var o=[],s=0;s<12;s++){var r=Math.random()*Math.PI*20,a=Math.random()*i,d=new x(.05*a*Math.cos(r),.05*a*Math.sin(r));this.nodes[n].x+=d.x,this.nodes[n].y+=d.y;for(var h=this.nodes[n].kawasakiRating(),u=this.nodes[n].adjacentNodes(),c=0,l=0;l<u.length;l++)c+=this.nodes[n].kawasakiRating();o.push({xy:d,rating:h+c}),this.nodes[n].x-=d.x,this.nodes[n].y-=d.y}var p=o.sort(function(e,t){return e.rating-t.rating});this.nodes[n].x+=p[0].xy.x,this.nodes[n].y+=p[0].xy.y}}return t},t.prototype.flatFoldable=function(){return this.nodes.map(function(e){return e.flatFoldable()}).reduce(function(e,t){return e&&t})},t.prototype.bounds=function(){return this.boundary.minimumRect()},t.prototype.bottomEdge=function(){return this.edges.filter(function(e){return e.orientation===v.border}).sort(function(e,t){return t.nodes[0].y+t.nodes[1].y-(e.nodes[0].y+e.nodes[1].y)}).shift()},t.prototype.topEdge=function(){return this.edges.filter(function(e){return e.orientation===v.border}).sort(function(e,t){return e.nodes[0].y+e.nodes[1].y-(t.nodes[0].y+t.nodes[1].y)}).shift()},t.prototype.rightEdge=function(){return this.edges.filter(function(e){return e.orientation===v.border}).sort(function(e,t){return t.nodes[0].x+t.nodes[1].x-(e.nodes[0].x+e.nodes[1].x)}).shift()},t.prototype.leftEdge=function(){return this.edges.filter(function(e){return e.orientation===v.border}).sort(function(e,t){return e.nodes[0].x+e.nodes[1].x-(t.nodes[0].x+t.nodes[1].x)}).shift()},t.prototype.contains=function(e){var t=Q(e);return void 0!==t&&this.boundary.contains(t)},t.prototype.square=function(e){var t=1;return void 0!=e&&0!=e&&(t=Math.abs(e)),this.setBoundary([[0,0],[t,0],[t,t],[0,t]])},t.prototype.rectangle=function(e,t){return void 0===e||void 0===t?this:(e=Math.abs(e),t=Math.abs(t),this.setBoundary([[0,0],[e,0],[e,t],[0,t]]))},t.prototype.hexagon=function(e){void 0===e&&(e=.5);var t=[[.5*(e=Math.abs(e)),.8660254*e],[e,0],[.5*e,.8660254*-e],[.5*-e,.8660254*-e],[-e,0],[.5*-e,.8660254*e]];return this.setBoundary(t)},t.prototype.noBoundary=function(){return this.boundary.edges=[],this.edges=this.edges.filter(function(e){return e.orientation!==v.border}),this.cleanAllUselessNodes(),this},t.prototype.setBoundary=function(e,t){var n=e.map(function(e){return Q(e)},this);return n[0].equivalent(n[n.length-1])&&n.pop(),void 0!==t&&!0===t?this.boundary.edges=this.boundary.setEdgesFromPoints(n):this.boundary.convexHull(n),this.edges=this.edges.filter(function(e){return e.orientation!==v.border}),this.cleanAllUselessNodes(),this.boundary.edges.forEach(function(e){this.newPlanarEdge(e.nodes[0].x,e.nodes[0].y,e.nodes[1].x,e.nodes[1].y).border()},this),this.cleanDuplicateNodes(),this},t.prototype.setMinRectBoundary=function(){this.edges=this.edges.filter(function(e){return e.orientation!==v.border});for(var e=1/0,t=0,n=1/0,i=0,o=0;o<this.nodes.length;o++)this.nodes[o].x>t&&(t=this.nodes[o].x),this.nodes[o].x<e&&(e=this.nodes[o].x),this.nodes[o].y>i&&(i=this.nodes[o].y),this.nodes[o].y<n&&(n=this.nodes[o].y);return this.setBoundary([new x(e,n),new x(t,n),new x(t,i),new x(e,i)]),this},t.prototype.clear=function(){if(this.nodes=[],this.edges=[],this.faces=[],this.symmetryLine=void 0,void 0===this.boundary)return this;for(var e=0;e<this.boundary.edges.length;e++){var t=this.boundary.edges[e].nodes;this.newPlanarEdge(t[0].x,t[0].y,t[1].x,t[1].y).border()}return this.cleanDuplicateNodes(),this},t.prototype.noSymmetry=function(){return this.symmetryLine=void 0,this},t.prototype.bookSymmetry=function(){var e=this.boundary.center();return this.setSymmetryLine(e,e.add(0,1))},t.prototype.diagonalSymmetry=function(){var e=this.boundary.center();return this.setSymmetryLine(e,e.add(.7071,.7071))},t.prototype.setSymmetryLine=function(e,t,n,i){var o=Z(e,t,n,i);return this.symmetryLine=new m(o.nodes[0],o.nodes[1].subtract(o.nodes[1])),this},t.prototype.exportFoldFile=function(){this.generateFaces(),this.nodeArrayDidChange(),this.edgeArrayDidChange();var e={file_spec:1,file_creator:"crease pattern javascript library by Robby Kraft",file_author:"",file_classes:["singleModel"]};return e.vertices_coords=this.nodes.map(function(e){return[e.x,e.y]},this),e.faces_vertices=this.faces.map(function(e){return e.nodes.map(function(e){return e.index},this)},this),e.edges_vertices=this.edges.map(function(e){return e.nodes.map(function(e){return e.index},this)},this),e.edges_assignment=this.edges.map(function(e){switch(e.orientation){case v.border:return"B";case v.mountain:return"M";case v.valley:return"V";case v.mark:return"F";default:return"U"}},this),e},t.prototype.importFoldFile=function(e){if(void 0===e||void 0===e.vertices_coords||void 0===e.edges_vertices)return!1;void 0!==e.frame_attributes&&e.frame_attributes.contains("3D")&&console.log("importFoldFile(): FOLD file marked as '3D', this library only supports 2D. attempting import anyway, expect a possible distortion due to orthogonal projection."),this.clear(),this.noBoundary(),e.vertices_coords.forEach(function(e){this.newPlanarNode(e[0]||0,e[1]||0)},this),this.nodeArrayDidChange(),e.edges_vertices.map(function(e){return e.map(function(e){return this.nodes[e]},this)},this).filter(function(e){return void 0!==e[0]&&void 0!==e[1]},this).forEach(function(e){this.newPlanarEdgeBetweenNodes(e[0],e[1])},this),this.edgeArrayDidChange();var t={B:v.border,M:v.mountain,V:v.valley,F:v.mark,U:v.mark};e.edges_assignment.map(function(e){return t[e]}).forEach(function(e,t){this.edges[t].orientation=e},this);var n=this.edges.filter(function(e){return e.orientation===v.border},this).map(function(e){return[new x(e.nodes[0].x,e.nodes[0].y),new x(e.nodes[1].x,e.nodes[1].y)]},this);return this.setBoundary([].concat.apply([],n)),this.clean(),!0},t.prototype.exportSVG=function(e){(void 0===e||e<=0)&&(e=600);var t=this.bounds(),n=t.size.width,i=t.size.height,o=t.topLeft.x,s=t.topLeft.y,r=e/n;console.log(t,n,o,r);var a="",d=(n*r).toFixed(2),h=(i*r).toFixed(2),u=(n*r*.0025).toFixed(1),c=(n*r*.0025*3).toFixed(1),l=(n*r*.0025*3*.5).toFixed(1);"0"!==u&&"0.0"!==u||(u="0.5"),a=a+'<?xml version="1.0" encoding="utf-8"?>\n<svg version="1.1" xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" width="'+d+'px" height="'+h+'px" viewBox="0 0 '+d+" "+h+'">\n<g>\n',a+='<line stroke="#000000" stroke-width="'+u+'" x1="0" y1="0" x2="'+d+'" y2="0"/>\n<line fill="none" stroke-width="'+u+'" stroke="#000000" stroke-miterlimit="10" x1="'+d+'" y1="0" x2="'+d+'" y2="'+h+'"/>\n<line fill="none" stroke-width="'+u+'" stroke="#000000" stroke-miterlimit="10" x1="'+d+'" y1="'+h+'" x2="0" y2="'+h+'"/>\n<line fill="none" stroke-width="'+u+'" stroke="#000000" stroke-miterlimit="10" x1="0" y1="'+h+'" x2="0" y2="0"/>\n';for(var p='stroke="#4379FF" stroke-dasharray="'+c+","+l+'" ',f=0;f<this.edges.length;f++){var g=this.edges[f].nodes[0],y=this.edges[f].nodes[1],w=((g.x-o)*r).toFixed(4),x=((g.y-s)*r).toFixed(4),m=((y.x-o)*r).toFixed(4),E=((y.y-s)*r).toFixed(4),b='stroke="#000000" ';this.edges[f].orientation===v.mountain&&(b='stroke="#EE1032" '),this.edges[f].orientation===v.valley&&(b=p),a+="<line "+b+'stroke-width="'+u+'" x1="'+w+'" y1="'+x+'" x2="'+m+'" y2="'+E+'"/>\n'}return a+="</g>\n</svg>\n"},t.prototype.exportSVGMin=function(e){(void 0===e||e<=0)&&(e=600);var t=this.bounds(),n=t.size.width,i=t.size.height,o=t.topLeft.x,s=t.topLeft.y,r=e/(n+2*o),a=(n*r*.0025).toFixed(1);"0"!==a&&"0.0"!==a||(a="0.5");var d=this.fewestPolylines(),h="";h=h+'<?xml version="1.0" encoding="utf-8"?>\n<svg version="1.1" xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" width="'+(n+2*o)*r+'px" height="'+(i+2*s)*r+'px" viewBox="0 0 '+(n+2*o)*r+" "+(i+2*s)*r+'">\n<g>\n';for(var u=0;u<d.length;u++)if(d[u].nodes.length>=0){h+='<polyline fill="none" stroke-width="'+a+'" stroke="#000000" points="';for(var c=0;c<d[u].nodes.length;c++){var l=d[u].nodes[c];h+=(r*l.x).toFixed(4)+","+(r*l.y).toFixed(4)+" "}h+='"/>\n'}return h+="</g>\n</svg>\n"},t.prototype.kiteBase=function(){return this.clear(),this.newPlanarEdge(0,0,.41421,0).border(),this.newPlanarEdge(.41421,0,1,0).border(),this.newPlanarEdge(1,0,1,.58578).border(),this.newPlanarEdge(1,.58578,1,1).border(),this.newPlanarEdge(1,1,0,1).border(),this.newPlanarEdge(0,1,0,0).border(),this.newPlanarEdge(1,0,0,1).mountain(),this.newPlanarEdge(0,1,1,.58578).valley(),this.newPlanarEdge(0,1,.41421,0).valley(),this.clean(),this},t.prototype.fishBase=function(){return this.clear(),this.newPlanarEdge(0,0,.29289,0).border(),this.newPlanarEdge(.29289,0,1,0).border(),this.newPlanarEdge(1,0,1,.70711).border(),this.newPlanarEdge(1,.70711,1,1).border(),this.newPlanarEdge(1,1,0,1).border(),this.newPlanarEdge(0,1,0,0).border(),this.newPlanarEdge(1,0,0,1).mountain(),this.newPlanarEdge(0,1,.70711,.70711).valley(),this.newPlanarEdge(0,1,.29289,.29289).valley(),this.newPlanarEdge(1,0,.29289,.29289).valley(),this.newPlanarEdge(1,0,.70711,.70711).valley(),this.newPlanarEdge(.29289,.29289,0,0).valley(),this.newPlanarEdge(.70711,.70711,1,1).valley(),this.newPlanarEdge(.70711,.70711,1,.70711).mountain(),this.newPlanarEdge(.29289,.29289,.29289,0).mountain(),this.clean(),this.generateFaces(),this},t.prototype.birdBase=function(){return this.clear(),this.newPlanarEdge(0,0,.5,0).border(),this.newPlanarEdge(.5,0,1,0).border(),this.newPlanarEdge(1,0,1,.5).border(),this.newPlanarEdge(1,.5,1,1).border(),this.newPlanarEdge(1,1,.5,1).border(),this.newPlanarEdge(.5,1,0,1).border(),this.newPlanarEdge(0,1,0,.5).border(),this.newPlanarEdge(0,.5,0,0).border(),this.newPlanarEdge(0,1,.5,.7929).mountain(),this.newPlanarEdge(0,1,.2071,.5).mountain(),this.newPlanarEdge(1,0,.5,.2071).mountain(),this.newPlanarEdge(1,0,.7929,.5).mountain(),this.newPlanarEdge(1,1,.7929,.5).mountain(),this.newPlanarEdge(1,1,.5,.7929).mountain(),this.newPlanarEdge(0,0,.2071,.5).mountain(),this.newPlanarEdge(0,0,.5,.2071).mountain(),this.newPlanarEdge(0,0,.35354,.35354).valley(),this.newPlanarEdge(.35354,.64645,0,1).valley(),this.newPlanarEdge(1,0,.64645,.35354).mountain(),this.newPlanarEdge(.64645,.64645,1,1).valley(),this.newPlanarEdge(.5,.5,.35354,.64645).valley(),this.newPlanarEdge(.64645,.35354,.5,.5).mountain(),this.newPlanarEdge(.5,.5,.64645,.64645).valley(),this.newPlanarEdge(.35354,.35354,.5,.5).valley(),this.newPlanarEdge(.35354,.35354,.2071,.5).mark(),this.newPlanarEdge(.5,.2071,.35354,.35354).mark(),this.newPlanarEdge(.35354,.64645,.5,.7929).mark(),this.newPlanarEdge(.2071,.5,.35354,.64645).mark(),this.newPlanarEdge(.64645,.64645,.7929,.5).mark(),this.newPlanarEdge(.5,.7929,.64645,.64645).mark(),this.newPlanarEdge(.64645,.35354,.5,.2071).mark(),this.newPlanarEdge(.7929,.5,.64645,.35354).mark(),this.newPlanarEdge(.5,.5,.5,.7929).mountain(),this.newPlanarEdge(.5,.2071,.5,.5).mountain(),this.newPlanarEdge(.5,.5,.7929,.5).mountain(),this.newPlanarEdge(.2071,.5,.5,.5).mountain(),this.newPlanarEdge(.5,.2071,.5,0).valley(),this.newPlanarEdge(.7929,.5,1,.5).valley(),this.newPlanarEdge(.5,.7929,.5,1).valley(),this.newPlanarEdge(.2071,.5,0,.5).valley(),this.clean(),this},t.prototype.frogBase=function(){return this.newPlanarEdge(0,0,.14646,.35353),this.newPlanarEdge(0,0,.35353,.14646),this.newPlanarEdge(.14646,.35353,.5,.5),this.newPlanarEdge(.5,.5,.35353,.14646),this.newPlanarEdge(.14646,.35353,.14646,.5),this.newPlanarEdge(0,.5,.14646,.5),this.newPlanarEdge(.5,.5,.5,.14646),this.newPlanarEdge(.5,.14646,.5,0),this.newPlanarEdge(.5,0,.35353,.14646),this.newPlanarEdge(.35353,.14646,.5,.14646),this.newPlanarEdge(.14646,.35353,0,.5),this.newPlanarEdge(.14646,.35353,.25,.25),this.newPlanarEdge(.25,.25,.35353,.14646),this.newPlanarEdge(0,1,.35353,.85353),this.newPlanarEdge(0,1,.14646,.64646),this.newPlanarEdge(.35353,.85353,.5,.5),this.newPlanarEdge(.5,.5,.14646,.64646),this.newPlanarEdge(.35353,.85353,.5,.85353),this.newPlanarEdge(.5,1,.5,.85353),this.newPlanarEdge(.5,.5,.5,.85353),this.newPlanarEdge(.5,.5,.14646,.5),this.newPlanarEdge(0,.5,.14646,.64646),this.newPlanarEdge(.14646,.64646,.14646,.5),this.newPlanarEdge(.35353,.85353,.5,1),this.newPlanarEdge(.35353,.85353,.25,.75),this.newPlanarEdge(.25,.75,.14646,.64646),this.newPlanarEdge(1,0,.85353,.35353),this.newPlanarEdge(1,0,.64646,.14646),this.newPlanarEdge(.85353,.35353,.5,.5),this.newPlanarEdge(.5,.5,.64646,.14646),this.newPlanarEdge(.85353,.35353,.85353,.5),this.newPlanarEdge(1,.5,.85353,.5),this.newPlanarEdge(.5,0,.64646,.14646),this.newPlanarEdge(.64646,.14646,.5,.14646),this.newPlanarEdge(.85353,.35353,1,.5),this.newPlanarEdge(.85353,.35353,.75,.25),this.newPlanarEdge(.75,.25,.64646,.14646),this.newPlanarEdge(1,1,.64646,.85353),this.newPlanarEdge(1,1,.85353,.64646),this.newPlanarEdge(.64646,.85353,.5,.5),this.newPlanarEdge(.5,.5,.85353,.64646),this.newPlanarEdge(.64646,.85353,.5,.85353),this.newPlanarEdge(.5,.5,.85353,.5),this.newPlanarEdge(1,.5,.85353,.64646),this.newPlanarEdge(.85353,.64646,.85353,.5),this.newPlanarEdge(.64646,.85353,.5,1),this.newPlanarEdge(.64646,.85353,.75,.75),this.newPlanarEdge(.75,.75,.85353,.64646),this.newPlanarEdge(.35353,.14646,.35353,0),this.newPlanarEdge(.64646,.14646,.64646,0),this.newPlanarEdge(.85353,.35353,1,.35353),this.newPlanarEdge(.85353,.64646,1,.64646),this.newPlanarEdge(.64646,.85353,.64646,1),this.newPlanarEdge(.35353,.85353,.35353,1),this.newPlanarEdge(.14646,.64646,0,.64646),this.newPlanarEdge(.14646,.35353,0,.35353),this.newPlanarEdge(.5,.5,.25,.25),this.newPlanarEdge(.5,.5,.75,.25),this.newPlanarEdge(.5,.5,.75,.75),this.newPlanarEdge(.5,.5,.25,.75),this.newPlanarEdge(.25,.75,0,1),this.newPlanarEdge(.25,.25,0,0),this.newPlanarEdge(.75,.25,1,0),this.newPlanarEdge(.75,.75,1,1),this.fragment(),this.clean(),this},t}(Y);t.default=he}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,